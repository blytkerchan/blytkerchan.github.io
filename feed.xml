<feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://github.com/VlinderSoftware/phoenix.ui">Phoenix.ui</generator><link href="https://rlc.vlinder.ca/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rlc.vlinder.ca" rel="alternate" type="text/html"/><updated>2024-05-19T17:41:55.615Z</updated><id>https://rlc.vlinder.ca/feed.xml</id><title type="html">Making Life Easier</title><subtitle>Blog about software engineering, and how it makes life easier</subtitle><entry><title type="html">What just happened?</title><link href="https://rlc.vlinder.ca/blog/2024/05/18/what-just-happened"></link><published>2024-05-18T00:00:00.000Z</published><updated>2024-05-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2024/05/18/what-just-happened</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2024/05/18/what-just-happened"><![CDATA[ <p>Regular visitors of this blog will have noticed that something has changed.</p>
 ]]></content></entry><entry><title type="html">Homo numeris?</title><link href="https://rlc.vlinder.ca/blog/2024/05/04/homo-numeris"></link><published>2024-05-04T00:00:00.000Z</published><updated>2024-05-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2024/05/04/homo-numeris</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2024/05/04/homo-numeris"><![CDATA[ <p>The Ukrainian government <a href="https://mfa.gov.ua/en/news/mzs-ukrayini-priznachilo-cifrovu-osobu-dlya-informuvannya-shchodo-konsulskih-pitan">announced on May 1</a> that they would use a “digital person” to represent the ministry of foreign affairs for at least some of their announcements. It (she?) will be a representative for the ministry on consular affairs and is called “Victoria Shi”, which refers to Ukraine&#39;s goal of victory in their war with Russia (or perhaps rather Russia’s war on them) and the fact that it’s an artificial intelligence.</p>
 ]]></content></entry><entry><title type="html">Python super-schema</title><link href="https://vlindersoftware.github.io/python-event-superschema/"></link><published>2024-04-03T00:00:00.000Z</published><updated>2024-04-03T00:00:00.000Z</updated><id>https://vlindersoftware.github.io/python-event-superschema/</id><content type="html" xml:base="https://vlindersoftware.github.io/python-event-superschema/"><![CDATA[ <p>Interoperability is the scourge of all information systems: knowing what data means, how it is formatted, and what the semantics of the various fields are can be a daunting task. Micro-services are generally designed to process messages in potentially large quantities and, in order to do that, need to know what the messages mean. They are also generally designed to be de-coupled from each other so they can easily be replaced or updated. That means that to construct a system with a micro-service-oriented architecture, you need to have them communicate with each other and you need messages to do that. Those messages have to be well-defined and follow some ground rules.</p>
 ]]></content></entry><entry><title type="html">DFMEA- Design Failure Mode and Effect Analysis</title><link href="https://rlc.vlinder.ca/blog/2023/05/13/dfmea"></link><published>2023-05-13T00:00:00.000Z</published><updated>2023-05-13T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2023/05/13/dfmea</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2023/05/13/dfmea"><![CDATA[ <p><img src="/assets/2023/02/cat.jpg" width="300px" align="right" alt="I wrote this by hand before typing it up, and drew a cat. This is the cat." />Design Failure Mode and Effect Analysis (DFMEA) is a software engineering technique that can help validate design decisions or improve upon them. It takes your existing design and puts each component and link under a magnifying glass, running it through a what-if scenario. In this post, I will walk through a DFMEA of a fictional website and on-line store for a fictional florist. If you read my other blog, <a href="https://applied-paranoia.com">Applied Paranoia</a> you may already be familiar with that application.</p>
 ]]></content></entry><entry><title type="html">Lawyers- you gotta (something) them</title><link href="https://rlc.vlinder.ca/blog/2022/05/30/lawyers"></link><published>2022-05-30T00:00:00.000Z</published><updated>2022-05-30T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2022/05/30/lawyers</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2022/05/30/lawyers"><![CDATA[ <blockquote>
<p>&quot;<em>we will need to make sure legal requirements are at least similar across the board</em>&quot;</p>
</blockquote>
<p>Legal requirements are something engineers don&#39;t like to think too much about: they get in the way of progress and are generally perceived as a pain in the nether regions. There are some disparaging ideas about what lawyers do on a daily basis that seem to be prevalent in the industry. From my point of view, though, they&#39;re not that different from software developers. They just have extra difficulties software developers don&#39;t have: they can only test their &quot;code&quot; by confronting a judge. In software, we have almost instant feed-back running our code using unit tests.</p>
 ]]></content></entry><entry><title type="html">Coaching and problem solving</title><link href="https://rlc.vlinder.ca/blog/2021/09/27/pcdit"></link><published>2021-09-27T00:00:00.000Z</published><updated>2021-09-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2021/09/27/pcdit</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2021/09/27/pcdit"><![CDATA[ <p>I am not a teacher. According to my wife, who is a professor at law and therefore knows a thing or two about teaching, I am <em>really, definitely</em> not a teacher. I may have taught the occasional workshop and may try to explain things from time to time, but who am I to argue with my wife? I do find myself in the position of having to explain things a lot, though, and with today&#39;s teleconferencing technologies, I find myself explaining to an ever-wider audience. The people on the other end of the connection are generally not novices: we share a common vocabulary and a common way of thinking about problems that makes it easier to convey whatever message I&#39;m trying to convey. For my wife, that would be the equivalent of talking to graduate or post-graduate students. Sometimes, though, I don&#39;t get my point accross, so I decided to read up on teaching.</p>
 ]]></content></entry><entry><title type="html">Fundamental limitations of quantum error mitigation</title><link href="https://rlc.vlinder.ca/blog/2021/09/19/fundamental-limitations-of-quantum-error-mitigation"></link><published>2021-09-19T00:00:00.000Z</published><updated>2021-09-19T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2021/09/19/fundamental-limitations-of-quantum-error-mitigation</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2021/09/19/fundamental-limitations-of-quantum-error-mitigation"><![CDATA[ <p>People have different ways of relaxing. Some people like to watch movies, others like to listen to music, ... I like to read papers, usually either about cybersecurity or quantum computing. Yesterday, I had a bit of time on my hands and decided to read on the latter: I had found an interesting paper called &quot;Fundamental limitations of quantum error mitigation&quot; on <a href="https://arxiv.org/pdf/2109.04457.pdf">Arxiv</a>, in which the authors, Ryuji Takagi, Suguru Endo, Shintaro Minagawa and Mile Gu, propose a new model for quantum error mitigation and, building on that model, find the fundamental limits.</p>
 ]]></content></entry><entry><title type="html">Contents of the Quebec vaccine passport -- TMI?</title><link href="https://rlc.vlinder.ca/blog/2021/09/06/vaxicode-tmi"></link><published>2021-09-06T00:00:00.000Z</published><updated>2021-09-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2021/09/06/vaxicode-tmi</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2021/09/06/vaxicode-tmi"><![CDATA[ <p>While driving this afternoon, my wife and I had a chat about the contents of the QR code that encodes the vaccine passport here in Quebec. Apparently there had been some questions to the premier and the minister of health about &quot;hackers&quot; getting to its contents, and the privacy implications of such &quot;cracks&quot;. I had some ideas on how I’d design it, but I didn’t know how it actually worked, and I was clueless as to what a hacker could well crack (regardless of the color of their hat). Surely the contents would be signed and there&#39;d be no more than strictly necessary encoded in the &quot;passport&quot;?</p>
 ]]></content></entry><entry><title type="html">Experimental test of local observer-independence</title><link href="https://rlc.vlinder.ca/blog/2021/08/31/experimental-test-of-local-observer-independence"></link><published>2021-08-31T00:00:00.000Z</published><updated>2021-08-31T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2021/08/31/experimental-test-of-local-observer-independence</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2021/08/31/experimental-test-of-local-observer-independence"><![CDATA[ <p>In a recent <a href="https://arxiv.org/pdf/1902.05080.pdf">paper published on arxiv</a>, what was formerly a thought experiment has been realized (with minor tweaks) and, while some say this indicates <a href="https://interestingengineering.com/new-physics-experiment-indicates-no-objective-reality">there is no objective reality</a>, I rather think it means something else. </p>
 ]]></content></entry><entry><title type="html">Here’s something I don’t understand</title><link href="https://rlc.vlinder.ca/blog/2021/08/29/something-i-dont-understand"></link><published>2021-08-29T00:00:00.000Z</published><updated>2021-08-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2021/08/29/something-i-dont-understand</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2021/08/29/something-i-dont-understand"><![CDATA[ <p>Every time I look at VHDL code written by (sometimes veteran, sometimes not so much) firmware engineers, the code looks similar: a bunch of signals coming in with their direction encore in the name, and sometimes the polarity as well, but very little in the way of functionality: sometimes it’s just the datasheet pin name of the device the signal is from that made it all the way into the component I’m looking at (which, when I find that annoying, is not the top). </p>
<p>This part I kinda get: it’s the same issue we’ve had in software for ages, dating back before the Hungarian warthogs of the 1990s. </p>
 ]]></content></entry><entry><title type="html">Wow, this is weird</title><link href="https://rlc.vlinder.ca/blog/2021/08/26/weird"></link><published>2021-08-26T00:00:00.000Z</published><updated>2021-08-26T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2021/08/26/weird</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2021/08/26/weird"><![CDATA[ <p>The last time I wrote anything on this blog was more than 20 months ago. Back then, I had just come back from spending Christmas with friends and family in Florida. Since then, we&#39;ve been in a global pandemic and no-one in their right mind would go to Florida.</p>
 ]]></content></entry><entry><title type="html">Happy new year!</title><link href="https://rlc.vlinder.ca/blog/2020/01/01/happy-newyear"></link><published>2020-01-01T00:00:00.000Z</published><updated>2020-01-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2020/01/01/happy-newyear</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2020/01/01/happy-newyear"><![CDATA[ <p>Happy new year!</p>
<p>2019 was an interesting year for many reasons, and I was lucky enough to finish it with family and friends in sunny Florida. 2020 also promises to be interesting, but being the nerd and nit-picker that I am, let me just rant about one minor detail...</p>
 ]]></content></entry><entry><title type="html">Weird title in this morning's Washington Post</title><link href="https://rlc.vlinder.ca/blog/2019/12/24/weird-title"></link><published>2019-12-24T00:00:00.000Z</published><updated>2019-12-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2019/12/24/weird-title</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2019/12/24/weird-title"><![CDATA[ <p>I subscribe to the Washington Post, not because I read it that much (I don&#39;t have much time for that), but because I think they do a good job of balanced journalism that warrants the few dollars the subscription costs. After all, journalists need to eat too. <em>I <strong>strongly</strong> suggest you do the same for whatever press outlet you think does a good job.</em></p>
<p>While flipping through its pages today, I came accross a title that looked, wrong: &quot;A NASA spacecraft circling the sub stumbled upon a trail of shooting stars&quot;. Any geek worth their salt will see what&#39;s wrong...</p>
 ]]></content></entry><entry><title type="html">Quantum teleportation</title><link href="https://rlc.vlinder.ca/blog/2019/11/12/quantum-teleportation"></link><published>2019-11-12T00:00:00.000Z</published><updated>2019-11-12T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2019/11/12/quantum-teleportation</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2019/11/12/quantum-teleportation"><![CDATA[ <p>A bit more fun with quantum computing...</p>
<p>Quantum teleportation is one of those things that Star Trek fans (like myself) like to believe is a dream come true: if it&#39;s possible to teleport qubits, surely it may be possible to teleport real-world things some day?</p>
 ]]></content></entry><entry><title type="html">My first results with quantum computing experiments</title><link href="https://rlc.vlinder.ca/blog/2019/11/06/first-quantum-results"></link><published>2019-11-06T00:00:00.000Z</published><updated>2019-11-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2019/11/06/first-quantum-results</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2019/11/06/first-quantum-results"><![CDATA[ <p>I ran two quantum circuits on two real quantum computers and one simulator. I&#39;ll share my results and some observations.</p>
 ]]></content></entry><entry><title type="html">Why classical computers need exponentially more time and memory to simulate quantum computers</title><link href="/assets/2019/11/quantum-exponential.pdf"></link><published>2019-11-03T00:00:00.000Z</published><updated>2019-11-03T00:00:00.000Z</updated><id>/assets/2019/11/quantum-exponential.pdf</id><content type="html" xml:base="/assets/2019/11/quantum-exponential.pdf"><![CDATA[ <p>If you&#39;re a bit like me, you get annoyed by the over-simplified explanations of quantum computers that have been going around since <a href="https://rlc.vlinder.ca/blog/2019/09/29/quantum-supremacy">Google demonstrated quantum supremacy</a>. One of the things that those explanations <em>always</em> gloss over is how it&#39;s so much harder for a classical computer to simulate a quantum computer running what is basically linear algebra, than it is for a quantum computer to just run it. The answer to that is <strong>quantum entanglement</strong>, and in this post I will try to explain how it works.</p>
<p>I should point out that this means either math or meth will be involved in understanding what I&#39;m about to write. The second option being temporary for understanding and permanent for negative effects, I recommend the first.</p>
<p>In order to explain why classical computers need exponentially more time and memory to simulate quantum computers according to the size of the quantum computer being simulated, I need to explain a few things about quantum computers and how they work. Now, because there&#39;s linear algebra involved and because it&#39;s a lot easier to write linear algebra in Latex than it is in markdown, you&#39;re going to have to <a href="/assets/2019/11/quantum-exponential.pdf">download this post in PDF format to read it</a>.</p>
<p><strong>2019-11-11 Update:</strong> I&#39;ve updated the PDF to clarify a few things, following comments by my lovely wife.</p>
 ]]></content></entry><entry><title type="html">Authentication of individual users in DNP3 Secure Authentication- TB2019-001, and more</title><link href="https://rlc.vlinder.ca/blog/2019/10/26/tb2019-001-multi-user-sa"></link><published>2019-10-26T00:00:00.000Z</published><updated>2019-10-26T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2019/10/26/tb2019-001-multi-user-sa</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2019/10/26/tb2019-001-multi-user-sa"><![CDATA[ <p>In February of this year, the DNP Technical Committee published TB2019-001: &quot;Authentication of individual users is obsolete in DNP3-SA&quot;. This technical bulletin, which was the first work item from the Tech Committee&#39;s Secure Authentication Task Force to be published, was the fruit of two and a half years of work between the moment the Tech Committee decided to remove multi-user support and the moment the document was created, edited, reviewed, etc.</p>
<p>In this post, I will take a close look at what the impact of this document is on existing implementations of DNP3: systems, devices and firmware.</p>
 ]]></content></entry><entry><title type="html">We live in a wonderful world</title><link href="https://rlc.vlinder.ca/blog/2019/10/19/wonderful-world"></link><published>2019-10-19T00:00:00.000Z</published><updated>2019-10-19T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2019/10/19/wonderful-world</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2019/10/19/wonderful-world"><![CDATA[ <p>We truly live in a wonderful world that would have been impossible to imagine only a few decades ago.</p>
<p>Allow me to wax eloquent for a moment.</p>
 ]]></content></entry><entry><title type="html">When RSA dies</title><link href="https://rlc.vlinder.ca/blog/2019/10/07/when-rsa-dies"></link><published>2019-10-07T00:00:00.000Z</published><updated>2019-10-07T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2019/10/07/when-rsa-dies</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2019/10/07/when-rsa-dies"><![CDATA[ <p>Below, I explain (as best I can):
<ul>
<li>why the end of RSA is nigh</li>
<li>why ephemeral Diffie-Hellman will survive</li>
<li>what we can and cannot build on top of ephemeral Diffie-Hellman</li>
<li>what this means for post-quantum PKI</li>
<li>why we need a quantum-resistant digital signature algorithm</li>
</ul></p>
<p>All of this is both complex and complicated. It is hard to write about this with any level of accuracy and still be readable for someone who hasn't spent an unreasonable amount of time steeped in articles about abstract math.</p>
<p>I gloss over a lot of details trying to keep it reasonably understandable, and I hope I haven't dumbed everything down too much. I apologize in advance both for the bits that are too hard to understand, and the bits that may seem too obvious. It's hard to find a middle ground.</p>
 ]]></content></entry><entry><title type="html">Quantum Supremacy</title><link href="https://rlc.vlinder.ca/blog/2019/09/28/quantum-supremacy"></link><published>2019-09-28T00:00:00.000Z</published><updated>2019-09-28T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2019/09/28/quantum-supremacy</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2019/09/28/quantum-supremacy"><![CDATA[ <p>A few days ago, the Financial Times <a href="https://www.ft.com/content/b9bb4e54-dbc1-11e9-8f9b-77216ebe1f17">reported</a> that &quot;Google claims to have reached quantum supremacy&quot;. The paper in question, available <a href="https://www.docdroid.net/h9oBikj/quantum-supremacy-using-a-programmable-superconducting-processor.pdf">here</a>, explains how they reached this milestone, and how they proved it. It does beg the question, though: what <em>is</em> quantum supremacy?</p>
 ]]></content></entry><entry><title type="html">That lunch wasn't free after all</title><link href="https://rlc.vlinder.ca/blog/2018/10/30/That-lunch-wasnt-free"></link><published>2018-10-30T00:00:00.000Z</published><updated>2018-10-30T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2018/10/30/That-lunch-wasnt-free</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2018/10/30/That-lunch-wasnt-free"><![CDATA[ <p>The Spectre and Meltdown bugs have shown that the free lunch was indeed over a decade ago. We should therefore stop attempting to exploit instruction-level parallelism with ever more complex stacks and ever more complex pipelines and branch predictors, and start exploiting the inherent parallelism of hardware. In order to do that, we need to change the way we thing about software from our current imperative way of thinking to a more declarative way of thinking. At the same time, we need to change the way our computers think about software to allow them to exploit this more declarative style to use their inherent parallelism and free up die space currently used for caches and ILP.</p>
<p><a href="/assets/2018/free-lunch.pdf">Read the article</a></p>
 ]]></content></entry><entry><title type="html">reboot</title><link href="https://rlc.vlinder.ca/blog/2018/09/11/Reboot"></link><published>2018-09-11T00:00:00.000Z</published><updated>2018-09-11T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2018/09/11/Reboot</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2018/09/11/Reboot"><![CDATA[ <p>Readers of this blog may wonder what happened: the layout is completely different, but the thing is also a lot faster..??!</p>
<p>The reason for this is simple: I stopped using Wordpress. It was giving me more trouble than it was worth, so I decided to move the site, and all of its contents, to Jekyll. This has the advantage of being able to write directly in Vim, with the only minor disadvantage of having to build the site.</p>
<p>Some formatting will need to be fixed for older posts, and I will start doing that when I have a bit of time. In the mean time, I will try to just post stuff out.</p>
<p>Some of what I post may be PDF files: I&#39;ve been using LaTeX a lot lately, and have some interesting stuff that presents better as PDFs. I&#39;ll see how that turns out as well.</p>
<p>Also: please let me know about any bugs you see: the site is large enough for me to not be able to re-read everything, so there may be a few bugs I&#39;ve missed.</p>
 ]]></content></entry><entry><title type="html">The Logging "problem"</title><link href="https://rlc.vlinder.ca/blog/2017/10/15/the-logging-problem"></link><published>2017-10-15T00:00:00.000Z</published><updated>2017-10-15T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2017/10/15/the-logging-problem</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2017/10/15/the-logging-problem"><![CDATA[ <p>A recurring problem in real-time industrial devices is logging: you want to log all the information you need to diagnose a problem, but you don&#39;t want to slow down your system and miss timing constraints, or unnecessarily burden your system when there are no problems. On the other hand, you often don&#39;t know that there is a problem to be diagnosed (and therefore logged) before there is an actual problem, in which case you may be too late to start your logs.</p>
<p>The solution seems obvious: just look a minute or so into the future and, if any trouble is brewing, start logging. But as a wise person once said: &quot;Always in motion the future is.&quot;
In the real world, we need real solutions.</p>
 ]]></content></entry><entry><title type="html">The Equifax data breach: what we know, what you can do, what's next</title><link href="https://rlc.vlinder.ca/blog/2017/09/12/the-equifax-data-breach-what-we-know-what-you-can-do-whats-next"></link><published>2017-09-12T00:00:00.000Z</published><updated>2017-09-12T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2017/09/12/the-equifax-data-breach-what-we-know-what-you-can-do-whats-next</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2017/09/12/the-equifax-data-breach-what-we-know-what-you-can-do-whats-next"><![CDATA[ <img src="/assets/2017/09/img_7368-141x300.jpg" alt="TL;DR mindmap">
 ]]></content></entry><entry><title type="html">The problem with making things too easy</title><link href="https://rlc.vlinder.ca/blog/2017/07/22/the-problem-with-making-things-too-easy"></link><published>2017-07-22T00:00:00.000Z</published><updated>2017-07-22T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2017/07/22/the-problem-with-making-things-too-easy</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2017/07/22/the-problem-with-making-things-too-easy"><![CDATA[ <blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">The thing with making things easier is that it makes mediocre people seem competent and incompetent people seem mediocre...</p>&mdash; Ronald (@blytkerchan) <a href="https://twitter.com/blytkerchan/status/888378949683773440?ref_src=twsrc%5Etfw">July 21, 2017</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
 ]]></content></entry><entry><title type="html">To those of you who don't speak French and follow me on Twitter</title><link href="https://rlc.vlinder.ca/blog/2017/05/06/to-those-of-you-who-dont-speak-french-and-follow-me-on-twitter"></link><published>2017-05-06T00:00:00.000Z</published><updated>2017-05-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2017/05/06/to-those-of-you-who-dont-speak-french-and-follow-me-on-twitter</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2017/05/06/to-those-of-you-who-dont-speak-french-and-follow-me-on-twitter"><![CDATA[ <p>As may know, France is going to the polls tomorrow to elect a new president. They have a choice between an unaffiliated centrist, Emmanuel Macron, and an unavowed fascist, Marine le Pen.</p>
<p>I am not French, but my wife is, and my children have a number citizenships among which French is one they all share. Aside from that, the stakes for the French election are much higher than they were for the Dutch elections, a few months ago, and arguably even for the American presidential election last November.</p>
<p>Let me explain those assertions.</p>
 ]]></content></entry><entry><title type="html">This guy is out of his mind (and lucky if he can still see)</title><link href="https://rlc.vlinder.ca/blog/2017/04/18/this-guy-is-out-of-his-mind-and-lucky-if-he-can-still-see"></link><published>2017-04-18T00:00:00.000Z</published><updated>2017-04-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2017/04/18/this-guy-is-out-of-his-mind-and-lucky-if-he-can-still-see</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2017/04/18/this-guy-is-out-of-his-mind-and-lucky-if-he-can-still-see"><![CDATA[ <p>This guy has to be completely bonkers: he wrote an application in C# (would not have my language of choice) to detect a human face in a live video feed and point a laser at it.</p>
 ]]></content></entry><entry><title type="html">"Police hack PGP server" -- really?</title><link href="https://rlc.vlinder.ca/blog/2017/03/23/police-hack-pgp-server-really"></link><published>2017-03-23T00:00:00.000Z</published><updated>2017-03-23T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2017/03/23/police-hack-pgp-server-really</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2017/03/23/police-hack-pgp-server-really"><![CDATA[ <p>This afternoon, this headline caught my attention: &quot;<a href="http://www.zdnet.com/article/police-hack-pgp-server-with-3-6-million-messages-from-organized-crime-blackberrys/">Police hack PGP server with 3.6 million messages from organized crime BlackBerrys</a>&quot;. When I read it, I thought: &quot;either the journalist/title writer got it wrong, or PGP is broken&quot;.</p>
 ]]></content></entry><entry><title type="html">Writing unmaintainable code in five easy steps</title><link href="https://rlc.vlinder.ca/blog/2017/03/04/writing-unmaintainable-code-in-five-easy-steps"></link><published>2017-03-04T00:00:00.000Z</published><updated>2017-03-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2017/03/04/writing-unmaintainable-code-in-five-easy-steps</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2017/03/04/writing-unmaintainable-code-in-five-easy-steps"><![CDATA[ <p>I have recently had to modify some code that, to say the least, was very hard to maintain -- or refactor, for that matter.</p>
<p>The following are a few, firmly tongue-in-cheek, steps to make sure your code is thoroughly frustrating to whoever needs to maintain it after you.</p>
 ]]></content></entry><entry><title type="html">Meetings, meetings, and more meetings</title><link href="https://rlc.vlinder.ca/blog/2016/11/16/meetings-meetings-and-more-meetings"></link><published>2016-11-16T00:00:00.000Z</published><updated>2016-11-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/11/16/meetings-meetings-and-more-meetings</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/11/16/meetings-meetings-and-more-meetings"><![CDATA[ <p>Recently, I spent a significant part of the day in a meeting reviewing the year&#39;s progress on several projects, including the introduction of an agile methodology -- Scrum. The approach in the meeting was simple: write on a sticky note what we did well, and on another what we should not repeat or how we should improve. The subject was &quot;Scrum/agile&quot;. I only wrote one sticky note: &quot;get rid of Scrum&quot;.</p>
<p><b><i>The TL;DR:</i></b><br/>
Scrum, in my opinion, is (moderately) useful for small teams with a single, short-term project -- something like a web application. The overhead it imposes <em>vastly</em> outweighs the benefits for larger teams and larger projects.</p>
 ]]></content></entry><entry><title type="html">Debugging — or: what I do for a living</title><link href="https://rlc.vlinder.ca/blog/2016/09/13/debugging-or-what-i-do-for-a-living"></link><published>2016-09-13T00:00:00.000Z</published><updated>2016-09-13T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/09/13/debugging-or-what-i-do-for-a-living</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/09/13/debugging-or-what-i-do-for-a-living"><![CDATA[ <p>I am often asked by friends and acquaintances of various backgrounds, what I do for a living. Depending on my mood at the time, I can answer in any number of ways, but invariably my answers are met with blank stares, questions that clearly demonstrate that I have once again failed to make myself understood and an eventual change of subject.</p>
 ]]></content></entry><entry><title type="html">Really, Twitterverse?</title><link href="https://rlc.vlinder.ca/blog/2016/09/10/really-twitterverse"></link><published>2016-09-10T00:00:00.000Z</published><updated>2016-09-10T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/09/10/really-twitterverse</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/09/10/really-twitterverse"><![CDATA[ <img src="/assets/2016/09/image-2-1024x768.jpeg" alt="Felicia, our cat, relaxing" />

<p>The Twitterverse has spoken, quietly, with a single vote -- a cat it is...</p>
 ]]></content></entry><entry><title type="html">Setting up a Xubuntu-based kiosk</title><link href="https://rlc.vlinder.ca/blog/2016/07/27/setting-up-a-xubuntu-based-kiosk"></link><published>2016-07-27T00:00:00.000Z</published><updated>2016-07-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/07/27/setting-up-a-xubuntu-based-kiosk</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/07/27/setting-up-a-xubuntu-based-kiosk"><![CDATA[ <p>This is another &quot;HOWTO&quot; post -- setting up a Xubuntu-based kiosk, which I did to make a new &quot;TV&quot; for my kids.</p>
 ]]></content></entry><entry><title type="html">Technocracy II</title><link href="https://rlc.vlinder.ca/blog/2016/05/25/technocracy-ii"></link><published>2016-05-25T00:00:00.000Z</published><updated>2016-05-25T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/05/25/technocracy-ii</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/05/25/technocracy-ii"><![CDATA[ <p>In my <a href="/blog/2016/05/technocracy/">previous post</a>, I described technocracy as something that is positive in project and product management, and in team organization. In this post, to supply a boundary to my previous text, I will make the case for the opposite.</p>
 ]]></content></entry><entry><title type="html">Technocracy</title><link href="https://rlc.vlinder.ca/blog/2016/05/21/technocracy"></link><published>2016-05-21T00:00:00.000Z</published><updated>2016-05-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/05/21/technocracy</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/05/21/technocracy"><![CDATA[ <p>In a discussion with a &quot;Product Owner&quot; recently, I told him I take a more technocratic approach to project management than they did. We discussed different project management styles for the next hour or so.</p>
<p><b><i>TL;DR:</i></b> I believe that</p>
<ul>
<li>to effectively and efficiently run a large team of developers who are collectively responsible for a product with a large code-base, that team needs to be organized as a network of smaller teams with experts leading each of those smaller teams, and</li>
<li>to successfully manage an "agile" development team and create a viable product, one has to have a vision and break it down from there.</li>
</ul>

 ]]></content></entry><entry><title type="html">Real-time thirsty</title><link href="https://rlc.vlinder.ca/blog/2016/04/20/real-time-thirsty"></link><published>2016-04-20T00:00:00.000Z</published><updated>2016-04-20T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/04/20/real-time-thirsty</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/04/20/real-time-thirsty"><![CDATA[ <p><b><i>The TL;DR:</i></b><br/></p>
<p>In this post, I show using a fictitious example why real-time systems are defined by their worst-case timing rather than their average-case timing.</p>
<p>Imagine you&#39;re running a coffee shop -- not the kind you find in Amsterdam, but one where they actually serve coffee. Your customers are generally in a hurry, so they just want to get a cup of coffee, pay and leave to catch their plane, train or automobile. To attract more customers and appeal to the Geek crowd, you name your coffee shop &quot;Real-Time Thirsty&quot; and promise an &quot;Average case serving within one minute!&quot;.</p>
<p>While you get many customers, you&#39;re not getting the Geeks-in-a-hurry crowd you were expecting.</p>
 ]]></content></entry><entry><title type="html">Setting up Cygwin for X forwarding</title><link href="https://rlc.vlinder.ca/blog/2016/04/15/setting-up-cygwin-for-x-forwarding"></link><published>2016-04-15T00:00:00.000Z</published><updated>2016-04-15T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/04/15/setting-up-cygwin-for-x-forwarding</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/04/15/setting-up-cygwin-for-x-forwarding"><![CDATA[ <p>This is one of those &quot;recipe&quot; posts that tend to be useful if you happen to want to do exactly what I just did. The end result of this one is a Windows shortcut called &quot;Linux terminal&quot; on the desktop, that opens up an SSH terminal to a Linux box, with X forwarding.</p>
 ]]></content></entry><entry><title type="html">Shutting down servers</title><link href="https://rlc.vlinder.ca/blog/2016/04/02/shutting-down-servers"></link><published>2016-04-02T00:00:00.000Z</published><updated>2016-04-02T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/04/02/shutting-down-servers</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/04/02/shutting-down-servers"><![CDATA[ <p>I used to have a server with five operating systems, running in VMs, merrily humming away compiling whatever I coded. I say &quot;used to have&quot; because I shut it down a few weeks ago. Now, I have those same operating systems, as well as a large number of others, running on systems I don&#39;t need to worry about.</p>
 ]]></content></entry><entry><title type="html">Checked output iterator</title><link href="https://rlc.vlinder.ca/blog/2016/03/28/checked-output-iterator"></link><published>2016-03-28T00:00:00.000Z</published><updated>2016-03-28T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/03/28/checked-output-iterator</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/03/28/checked-output-iterator"><![CDATA[ <p>While writing about security -- which takes a great deal of my time lately, which is one of the reasons I haven&#39;t updated my blog as often as I usually would -- I came to the conclusion that, while I recommend using STL algorithms, iterators and containers for safety purposes that doesn&#39;t solve the problem when the standard algorithms don&#39;t check the validity of their output ranges.</p>
 ]]></content></entry><entry><title type="html">Schoenmaker, blijf bij je leest (Cobbler, stick to your last)</title><link href="https://rlc.vlinder.ca/blog/2016/03/08/schoenmaker-blijf-bij-je-leest-cobbler-stick-to-your-last"></link><published>2016-03-08T00:00:00.000Z</published><updated>2016-03-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2016/03/08/schoenmaker-blijf-bij-je-leest-cobbler-stick-to-your-last</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2016/03/08/schoenmaker-blijf-bij-je-leest-cobbler-stick-to-your-last"><![CDATA[ <p>This is an old Dutch saying, which probably has its origins in a village with a particularly opinionated cobbler.</p>
<p>I am not one to stick to my last -- but if I were a cobbler, I don&#39;t think I&#39;d be <em>that</em> cobbler: I like to know what I&#39;m doing.</p>
 ]]></content></entry><entry><title type="html">Interesting modifications to the Lamport queue, part II</title><link href="https://rlc.vlinder.ca/blog/2015/11/07/interesting-modifications-to-the-lamport-queue-part-ii"></link><published>2015-11-07T00:00:00.000Z</published><updated>2015-11-07T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/11/07/interesting-modifications-to-the-lamport-queue-part-ii</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/11/07/interesting-modifications-to-the-lamport-queue-part-ii"><![CDATA[ <p>In the <a href="/blog/2015/11/05/interesting-modifications-to-the-lamport-queue">previous installment</a>, on this subject, I described a few modifications to the Lamport queue introduced by Nhat Minh Le <em>et al.</em> to relax operations on shared state as much as possible, while maintaining correctness.</p>
<p>In this article, I will discuss the further optimizations to reduce the number of operations on shared state, thus eliminating the need for memory barriers completely in many cases.</p>
 ]]></content></entry><entry><title type="html">Interesting modifications to the Lamport queue</title><link href="https://rlc.vlinder.ca/blog/2015/11/06/interesting-modifications-to-the-lamport-queue"></link><published>2015-11-06T00:00:00.000Z</published><updated>2015-11-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/11/06/interesting-modifications-to-the-lamport-queue</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/11/06/interesting-modifications-to-the-lamport-queue"><![CDATA[ <p>While researching lock-free queue algorithms, I came across a few articles that made some interesting modifications to the Lamport queue. One made it more efficient by exploiting C11&#39;s new memory model, while another made it more efficient by using cache locality. As I found the first one to be more interesting, and the refinements more useful for general multi-threaded programming, I thought I&#39;d explain that one in a bit more detail.</p>
 ]]></content></entry><entry><title type="html">Progress in DNP3 security</title><link href="https://rlc.vlinder.ca/blog/2015/10/01/progress-in-dnp3-security"></link><published>2015-10-01T00:00:00.000Z</published><updated>2015-10-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/10/01/progress-in-dnp3-security</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/10/01/progress-in-dnp3-security"><![CDATA[ <p>In <a href="/blog/2014/07/ics-security-current-and-future-focus/">July last year</a>, I discussed why Adam Crain and Chris Sistrunk fuzzed DNP3 stacks in devices from various vendors, finding many issues along the way (see <a href="https://automatak.com/robus/">project Robus</a>). This time, I&#39;ll provide a bit of an overview of what has happened since.</p>
 ]]></content></entry><entry><title type="html">CIS: "Protecting" code in stead of data</title><link href="https://rlc.vlinder.ca/blog/2015/09/04/cis-protecting-code-in-stead-of-data"></link><published>2015-09-04T00:00:00.000Z</published><updated>2015-09-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/09/04/cis-protecting-code-in-stead-of-data</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/09/04/cis-protecting-code-in-stead-of-data"><![CDATA[ <p>The Windows API contains a synchronization primitive that <em>is</em> a mutual exclusion device, but is also a colossal misnomer. I mean, of course, the <code>CRITICAL_SECTION</code>.</p>
 ]]></content></entry><entry><title type="html">CIS: Lock Leaks</title><link href="https://rlc.vlinder.ca/blog/2015/08/17/cis-lock-leaks"></link><published>2015-08-17T00:00:00.000Z</published><updated>2015-08-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/08/17/cis-lock-leaks</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/08/17/cis-lock-leaks"><![CDATA[ <p>The two most popular threading APIs, the Windows API and pthreads, both have the same basic way of locking and unlocking a mutex -- that is, with two separate functions. This leaves the code prone to lock leak: the thread that acquired a lock doesn&#39;t release it because an error occurred.</p>
 ]]></content></entry><entry><title type="html">CIS: Unexpected Coupling</title><link href="https://rlc.vlinder.ca/blog/2015/08/05/cis-unexpected-coupling"></link><published>2015-08-05T00:00:00.000Z</published><updated>2015-08-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/08/05/cis-unexpected-coupling</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/08/05/cis-unexpected-coupling"><![CDATA[ <p>One of the most common problems with synchronization occurs when things need each other that you didn&#39;t expect to need each other.</p>
 ]]></content></entry><entry><title type="html">Git demystification</title><link href="https://rlc.vlinder.ca/blog/2015/07/20/git-demystification"></link><published>2015-07-20T00:00:00.000Z</published><updated>2015-07-20T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/07/20/git-demystification</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/07/20/git-demystification"><![CDATA[ <p>There are a few misconceptions I hear about Git that I find should be cleared up a bit, so here goes:</p>
 ]]></content></entry><entry><title type="html">Three ideas you should steal from Continuous Integration</title><link href="https://rlc.vlinder.ca/blog/2015/07/16/three-ideas-you-should-steal-from-continuous-integration"></link><published>2015-07-16T00:00:00.000Z</published><updated>2015-07-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/07/16/three-ideas-you-should-steal-from-continuous-integration</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/07/16/three-ideas-you-should-steal-from-continuous-integration"><![CDATA[ <p>I like Continuous Integration -- a lot. Small incremental changes, continuous testing, continuous builds: these are Good Things. They provide statistics, things you can measure your progress with. But Continuous Integration requires an investment on the part of the development team, the testers, etc. There are, however, a few things you can adopt <em>right now</em> so, I decided to give you a list of things I think you <em>should</em> adopt.</p>
 ]]></content></entry><entry><title type="html">undefined</title><link href="https://rlc.vlinder.ca/blog/2015/07/03/eliminating-waste-as-a-way-to-optimize"></link><published>2015-07-03T00:00:00.000Z</published><updated>2015-07-03T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/07/03/eliminating-waste-as-a-way-to-optimize</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/07/03/eliminating-waste-as-a-way-to-optimize"><![CDATA[ <p>I recently had a chance to work on an implementation of an Arachnida-based web server that had started using a lot of memory as new features were being added.</p>
<p>Arachnida itself is pretty lean and comes with a number of tools to help build web services in industrial devices, but it is not an &quot;app in a box&quot;: some assembly is required and you have to make some of the parts yourself.</p>
 ]]></content></entry><entry><title type="html">Technical documentation</title><link href="https://rlc.vlinder.ca/blog/2015/06/30/technical-documentation"></link><published>2015-06-30T00:00:00.000Z</published><updated>2015-06-30T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/06/30/technical-documentation</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/06/30/technical-documentation"><![CDATA[ <p>Developers tend to have a very low opinion of technical documentation: it is often wrong, partial, unclear and not worth the trouble of reading. This is, in part, a self-fulfilling prophecy: such low opinions of technical documentation results in them not being read, and not being invested in.</p>
 ]]></content></entry><entry><title type="html">The story of "Depends"</title><link href="https://rlc.vlinder.ca/blog/2015/06/29/the-story-of-depends"></link><published>2015-06-29T00:00:00.000Z</published><updated>2015-06-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/06/29/the-story-of-depends</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/06/29/the-story-of-depends"><![CDATA[ <p>Today, I announced on behalf of my company, Vlinder Software, that we would no longer be supporting &quot;Depends&quot;, the dependency tracker. I think it may be worthwhile to tell you a by about the history of Depends, how it became a product of Vlinder Software, and why it no longer is one.</p>
 ]]></content></entry><entry><title type="html">Bayes' theorem in non-functional requirements analysis -- an example</title><link href="https://rlc.vlinder.ca/blog/2015/06/25/bayes-theorem-in-non-functional-requirements-analysis-an-example"></link><published>2015-06-25T00:00:00.000Z</published><updated>2015-06-25T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/06/25/bayes-theorem-in-non-functional-requirements-analysis-an-example</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/06/25/bayes-theorem-in-non-functional-requirements-analysis-an-example"><![CDATA[ <p>I am not a mathematician, but I do like Bayes&#39; theorem for non-functional requirements analysis -- and I&#39;d like to present an example of its application</p>
 ]]></content></entry><entry><title type="html">Globe and Mail: Canada lacks law that defines, protects trade secrets</title><link href="https://rlc.vlinder.ca/blog/2015/05/24/globe-and-mail-canada-lacks-law-that-defines-protects-trade-secrets"></link><published>2015-05-24T00:00:00.000Z</published><updated>2015-05-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/05/24/globe-and-mail-canada-lacks-law-that-defines-protects-trade-secrets</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/05/24/globe-and-mail-canada-lacks-law-that-defines-protects-trade-secrets"><![CDATA[ <p>According to the Globe and Mail (Iain Marlow, 20 May 2015) the 32-count indictment against six Chinese nationals who allegedly used their positions to obtain intellectual property from universities and businesses in the U.S. and then take that knowledge home to China, would not be possible here: &quot;Canadian observers say the 32 count indictment, which was unsealed late on Monday, highlights the prevalence and severity of industrial espionage in North America, and underscores the need for Canada to adopt more stringent laws. Canada has no dedicated act on trade secrets and economic espionage and has not successfully prosecuted a similar case, experts say.&quot;</p>
 ]]></content></entry><entry><title type="html">Why I didn't buy a new iPad today</title><link href="https://rlc.vlinder.ca/blog/2015/02/15/why-i-didnt-buy-a-new-ipad-today"></link><published>2015-02-15T00:00:00.000Z</published><updated>2015-02-15T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2015/02/15/why-i-didnt-buy-a-new-ipad-today</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2015/02/15/why-i-didnt-buy-a-new-ipad-today"><![CDATA[ <p>Behavioural economists will tell you that the &quot;happy high&quot; you get from buying a new toy, a new device, a new computer, a new car or a new house usually wares off within three months. It&#39;s called the ever-receding horizon of happiness (or something like that -- something close to the ever-receding hair line) and it&#39;s why I have a small car (just big enough for day-to-day requirements but not big enough to take the whole family on vacation), a fairly crappy laptop computer (good enough to run OpenOffice Write and an SSH client on, but not good enough to compile FPGA firmware or big chunks of software in any hurry, but that&#39;s what the SSH client is there for) and why I&#39;ve had the same iPad for the last five years or so.</p>
 ]]></content></entry><entry><title type="html">Implementing time-outs (safely)</title><link href="https://rlc.vlinder.ca/blog/2014/11/13/implementing-time-outs-safely"></link><published>2014-11-13T00:00:00.000Z</published><updated>2014-11-13T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/11/13/implementing-time-outs-safely</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/11/13/implementing-time-outs-safely"><![CDATA[ <p>Thyme is a herb that grows in gardens.</p>
 ]]></content></entry><entry><title type="html">Bungee coding</title><link href="https://rlc.vlinder.ca/blog/2014/11/09/bungee-coding"></link><published>2014-11-09T00:00:00.000Z</published><updated>2014-11-09T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/11/09/bungee-coding</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/11/09/bungee-coding"><![CDATA[ <p>For the last few weeks, I&#39;ve been doing what you might call <em>bungee coding</em>: going from high-level to low-level code and back. This week, a whole team is doing it -- fun!</p>
 ]]></content></entry><entry><title type="html">Adding SPI support to the BrainF interpreter</title><link href="https://rlc.vlinder.ca/blog/2014/11/08/adding-spi-support-to-the-brainf-interpreter"></link><published>2014-11-08T00:00:00.000Z</published><updated>2014-11-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/11/08/adding-spi-support-to-the-brainf-interpreter</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/11/08/adding-spi-support-to-the-brainf-interpreter"><![CDATA[ <p>While at Chicago&#39;s O&#39;Hare airport, waiting for my connecting flight to Reno, I had a bit of time to start coding on my BrainF interpreter again -- once I had found an outlet, that is. My goal was to add something that would allow something else to communicate with the interpreter. There are a few buses I like for this kind of thing, and SPI is one of them.</p>
 ]]></content></entry><entry><title type="html">Miss(ed) Communication</title><link href="https://rlc.vlinder.ca/blog/2014/11/01/missed-communication"></link><published>2014-11-01T00:00:00.000Z</published><updated>2014-11-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/11/01/missed-communication</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/11/01/missed-communication"><![CDATA[ <img src="/assets/2014/10/IMG_1303-1024x279.png" alt="Miss(ed) Communication" /> ]]></content></entry><entry><title type="html">Radical Refactoring: Breaking Changes</title><link href="https://rlc.vlinder.ca/blog/2014/10/24/radical-refactoring-breaking-changes"></link><published>2014-10-24T00:00:00.000Z</published><updated>2014-10-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/10/24/radical-refactoring-breaking-changes</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/10/24/radical-refactoring-breaking-changes"><![CDATA[ <p>One of the most common sources of bugs is ambiguity: some too-subtle API change that&#39;s missed in a library update and introduces a subtle bug, that finally only gets found out in the field. My answer to that problem is radical: make changes breaking changes -- make sure the code just won&#39;t compile unless fixed: the compiler is generally better at finding things you missed than you are.</p>
 ]]></content></entry><entry><title type="html">Improving the BrainF interpreter</title><link href="https://rlc.vlinder.ca/blog/2014/10/22/improving-the-brainf-interpreter"></link><published>2014-10-22T00:00:00.000Z</published><updated>2014-10-22T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/10/22/improving-the-brainf-interpreter</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/10/22/improving-the-brainf-interpreter"><![CDATA[ <p>As I wrote in a <a href="/blog/2014/10/writing-a-brainf-interpreter-in-vhdl/">previous post</a>, I wrote a BrainF interpreter in VHDL over a week-end. I decided to improve it a bit.</p>
 ]]></content></entry><entry><title type="html">Radical Refactoring: Have the compiler to (some of) the reviewing</title><link href="https://rlc.vlinder.ca/blog/2014/10/18/radical-refactoring-have-the-compiler-to-some-of-the-reviewing"></link><published>2014-10-18T00:00:00.000Z</published><updated>2014-10-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/10/18/radical-refactoring-have-the-compiler-to-some-of-the-reviewing</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/10/18/radical-refactoring-have-the-compiler-to-some-of-the-reviewing"><![CDATA[ <p>One of the most common sources of bugs is ambiguity: some too-subtle API change that&#39;s missed in a library update and introduces a subtle bug, that finally only gets found out in the field. My answer to that problem is radical: make changes breaking changes -- make sure the code just won&#39;t compile unless fixed: the compiler is generally better at finding things you missed than you are.</p>
 ]]></content></entry><entry><title type="html">Writing a BrainF interpreter ... in VHDL</title><link href="https://rlc.vlinder.ca/blog/2014/10/03/writing-a-brainf-interpreter-in-vhdl"></link><published>2014-10-03T00:00:00.000Z</published><updated>2014-10-03T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/10/03/writing-a-brainf-interpreter-in-vhdl</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/10/03/writing-a-brainf-interpreter-in-vhdl"><![CDATA[ <p>I&#39;ve written parsers and interpreters before, but usually in C++ or, if I was feeling like doing <em>all</em> of the hard work myself, in C.</p>
 ]]></content></entry><entry><title type="html">Optimization by puzzle</title><link href="https://rlc.vlinder.ca/blog/2014/09/05/optimization-by-puzzle"></link><published>2014-09-05T00:00:00.000Z</published><updated>2014-09-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/09/05/optimization-by-puzzle</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/09/05/optimization-by-puzzle"><![CDATA[ <p>Given a <code>query</code> routine that takes a name and may return several, write a routine that takes a single name and returns a set of names for which each of the following is true:</p>
<ol>
<li>For each name in the set, <code>query</code> has been called exactly once.</li>
<li>All the results from the calls to <code>query</code> are included in the set</li>
<li>the parameter to the routine is not included in the set</li>
</ol>
<p>You may assume the following:</p>
<ol>
<li>Calls to <code>query</code> are idempotent (So you really do need to call them only once).</li>
<li>There is a finite number of values for names.</li>
<li>Names are less-than-comparable value-types (i.e. you can store them in an <code>std::set</code>) and are not expensive to copy</li>
<li><code>query</code> results never contain their argument (I.e. for the case at hand, we&#39;re querying a directed acyclic graph, so our first argument will never be seen in any of the <code>query</code> results, although any given value may appear more than once in <code>query</code> results).</li>
</ol>
 ]]></content></entry><entry><title type="html">A different take on the "optimize by puzzle" problem</title><link href="https://rlc.vlinder.ca/blog/2014/09/05/a-different-take-on-the-optimize-by-puzzle-problem"></link><published>2014-09-05T00:00:00.000Z</published><updated>2014-09-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/09/05/a-different-take-on-the-optimize-by-puzzle-problem</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/09/05/a-different-take-on-the-optimize-by-puzzle-problem"><![CDATA[ <p>I explained the problem I presented in my <a href="/blog/2014/09/optimization-by-puzzle/">previous post</a> to my wife overt dinner yesterday. She&#39;s a professor at law and a very intelligent person, but has no notion of set theory, graph theory, or algorithms. I&#39;m sure many of my colleagues run into similar problems, so I thought I&#39;d share the analogies I used to explain the problem, and the solution. I didn&#39;t get to explaining how to arrive at computational complexity, though.</p>
 ]]></content></entry><entry><title type="html">Looking for bugs (in several wrong places)</title><link href="https://rlc.vlinder.ca/blog/2014/08/11/looking-for-bugs-in-several-wrong-places"></link><published>2014-08-11T00:00:00.000Z</published><updated>2014-08-11T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/08/11/looking-for-bugs-in-several-wrong-places</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/08/11/looking-for-bugs-in-several-wrong-places"><![CDATA[ <p>I recently went on a bug-hunt in a huge system that I knew next to nothing about. The reason <em>I</em> went on this bug-hunt was because, although I didn&#39;t know the system itself, I knew what the system was supposed to do, and I can read and write all the programming languages involved in developing the system (C++, C and VHDL). I&#39;m also very familiar with the protocol of which the implementation was buggy, so not knowing the system was a minor inconvenience.</p>
<p>These are some notes I took during the bug-hunt, some of which intentionally kept vague so as to protect the guilty.</p>
 ]]></content></entry><entry><title type="html">Re: E-mail</title><link href="https://rlc.vlinder.ca/blog/2014/07/15/re-e-mail"></link><published>2014-07-15T00:00:00.000Z</published><updated>2014-07-15T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/07/15/re-e-mail</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/07/15/re-e-mail"><![CDATA[ <p>The Globe&Mail; dedicated half a page of the Report on Business section to managing your inbox today. People who work with me know that</p>
<ol>
<li>if you want to get ahold of me quickly, E-mail is not the way to go</li>
<li>if you want a thought-out, thorough response, E-mail <em>is</em> the way to go</li>
</ol>
 ]]></content></entry><entry><title type="html">ICS Security: Current and Future Focus</title><link href="https://rlc.vlinder.ca/blog/2014/07/10/ics-security-current-and-future-focus"></link><published>2014-07-10T00:00:00.000Z</published><updated>2014-07-10T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/07/10/ics-security-current-and-future-focus</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/07/10/ics-security-current-and-future-focus"><![CDATA[ <p>The flurry of DNP3-related vulnerabilities reported to ICS-CERT as part of <a href="http://www.automatak.com/robus/">Automatak&#39;s project Robus</a> seems to have subsided a bit, so it may be time to take a look at where we are regarding ICS security, and where we might be going next.</p>
 ]]></content></entry><entry><title type="html">Is Open Source software security falling apart?</title><link href="https://rlc.vlinder.ca/blog/2014/07/06/is-open-source-software-security-falling-apart"></link><published>2014-07-06T00:00:00.000Z</published><updated>2014-07-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/07/06/is-open-source-software-security-falling-apart</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/07/06/is-open-source-software-security-falling-apart"><![CDATA[ <p>There have been a number of well-publicized security flaws in open source software lately -- the most well-publicized of course being the OpenSSL Heartbleed bug.</p>
<p>Then there&#39;s the demise of Truecrypt, recent bugs in GnuTLS and recent bugs in the Linux kernel.</p>
<p>So, is there a systemic problem with Open Source software? Does proprietary software have the same problem?</p>
 ]]></content></entry><entry><title type="html">"A camel is a horse designed by a committee"</title><link href="https://rlc.vlinder.ca/blog/2014/07/03/a-camel-is-a-horse-designed-by-a-committee"></link><published>2014-07-03T00:00:00.000Z</published><updated>2014-07-03T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/07/03/a-camel-is-a-horse-designed-by-a-committee</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/07/03/a-camel-is-a-horse-designed-by-a-committee"><![CDATA[ <p>I don&#39;t usually use this blog to vent frustration, but I&#39;ve been reading standards lately...</p>
<p>There are four versions of the horse:</p>
<ul>
<li><p><strong>Pony</strong>. Horses as the Good Lord intended them. Strong and sturdy, yet soft and cuddly; obedient yet intelligent; and I&#39;m told they&#39;re rather tasty too!</p>
</li>
<li><p><strong>Horse</strong>. All the qualities of the pony, without the esthetics.</p>
</li>
<li><p><strong>Donkey</strong>. The beta version of the pony: strong and sturdy, but none of the frills and quite a few bugs in the programming. Also: they don&#39;t taste nearly as good (or so I&#39;m told).</p>
</li>
<li><p><strong>Ass</strong>. What the beta version became when the PMO took over.</p>
</li>
<li><p><strong>Cow</strong>. A forked-off project from the (then open-source) Horse project that went for taste, combined with a bigger ass for the workload (in the form of an ox -- you didn&#39;t think I misspelled ass, did you?)</p>
</li>
<li><p><strong>Dromedary</strong>. When some of the committee members got tired of trying to reach a consensus, they took what they had and ran with it -- even if it&#39;s running was more than a bit awkward.</p>
</li>
<li><p><strong>Camel</strong>. None of the looks. Some of the features. Some features you didn&#39;t think a horse should have. Some you didn&#39;t think a horse <em>could</em> have. More of the smell. Much, much more.</p>
</li>
</ul>
<p>When <em>you</em> count, that doesn&#39;t add up to four, does it?</p>
<p>That&#39;s what design by committee is all about!</p>
 ]]></content></entry><entry><title type="html">Arachnida, The Heartbleed bug and Vlinder Software</title><link href="https://rlc.vlinder.ca/blog/2014/04/11/arachnida-the-heartbleed-bug-and-vlinder-software"></link><published>2014-04-11T00:00:00.000Z</published><updated>2014-04-11T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/04/11/arachnida-the-heartbleed-bug-and-vlinder-software</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/04/11/arachnida-the-heartbleed-bug-and-vlinder-software"><![CDATA[ <p>No Content Found</p>
 ]]></content></entry><entry><title type="html">What the industry should do with the upcoming Aegis release</title><link href="https://rlc.vlinder.ca/blog/2014/03/01/what-the-industry-should-do-with-the-upcoming-aegis-release"></link><published>2014-03-01T00:00:00.000Z</published><updated>2014-03-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/03/01/what-the-industry-should-do-with-the-upcoming-aegis-release</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/03/01/what-the-industry-should-do-with-the-upcoming-aegis-release"><![CDATA[ <p><a href="https://web.archive.org/web/20150308032035/http://automatak.net/wordpress/?p=482">Automatak will be releasing</a> the Aegis fuzzing tool publicly and for free for the first time in a few days. Like I said yesterday:</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Can hardly wait:  &quot;2 weeks until Aegis™ release&quot; <a href="http://t.co/KrQkrbb9a9">http://t.co/KrQkrbb9a9</a></p>&mdash; Ronald (@blytkerchan) <a href="https://twitter.com/blytkerchan/status/439582028259147777?ref_src=twsrc%5Etfw">March 1, 2014</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>to which Adam replied:</p>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/blytkerchan?ref_src=twsrc%5Etfw">@blytkerchan</a> I just hope the industry is ready!</p>&mdash; Code Monkey Hate Bug (@jadamcrain) <a href="https://twitter.com/jadamcrain/status/439774683827679233?ref_src=twsrc%5Etfw">March 1, 2014</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I don&#39;t think the industry is ready -- and here&#39;s why.</p>
 ]]></content></entry><entry><title type="html">Optimizing with type lists</title><link href="https://rlc.vlinder.ca/blog/2014/02/09/optimizing-with-type-lists"></link><published>2014-02-09T00:00:00.000Z</published><updated>2014-02-09T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/02/09/optimizing-with-type-lists</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/02/09/optimizing-with-type-lists"><![CDATA[ <p>In this post, I will take a brief look at how using type lists can help optimize certain applications.</p>
 ]]></content></entry><entry><title type="html">A functional version of the KMP algorithm</title><link href="https://rlc.vlinder.ca/blog/2014/02/01/a-functional-version-of-the-kmp-algorithm"></link><published>2014-02-01T00:00:00.000Z</published><updated>2014-02-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/02/01/a-functional-version-of-the-kmp-algorithm</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/02/01/a-functional-version-of-the-kmp-algorithm"><![CDATA[ <p>For one of the projects I&#39;m working on, I needed a compile-time version of the KMP algorithm in C++. I started by making the algorithm functional.</p>
 ]]></content></entry><entry><title type="html">ICS security and regulatory requirements</title><link href="https://rlc.vlinder.ca/blog/2014/01/05/ics-security-and-regulatory-requirements"></link><published>2014-01-05T00:00:00.000Z</published><updated>2014-01-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/01/05/ics-security-and-regulatory-requirements</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/01/05/ics-security-and-regulatory-requirements"><![CDATA[ <p>In North America, ICS security, as regards the electricity grid, is regulated by <a href="http://www.nerc.com/">NERC</a>, which provides and enforces, among other things, the Critical Infrastructure Protection (CIP) standards.</p>
<p>In this post, I&#39;ll provide a quick overview of those standards, provisions slightly more in-depth information than in my <a href="/blog/2014/01/the-crain-sistrunk-vulnerabilities/">previous post</a>.</p>
 ]]></content></entry><entry><title type="html">The Crain-Sistrunk vulnerabilities</title><link href="https://rlc.vlinder.ca/blog/2014/01/03/the-crain-sistrunk-vulnerabilities"></link><published>2014-01-03T00:00:00.000Z</published><updated>2014-01-03T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2014/01/03/the-crain-sistrunk-vulnerabilities</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2014/01/03/the-crain-sistrunk-vulnerabilities"><![CDATA[ <p>In the two previous posts, I&#39;ve shown that industrial control systems -- ICSs -- <a href="/blog/2013/12/the-importance-of-ics-security-pervasiveness-of-icss/">are becoming more pervasive</a>, and that they <a href="/blog/2013/12/the-importance-of-ics-security-ics-communications/">rely on security through obscurity</a>.</p>
<p>Now, let&#39;s make the link with current events.</p>
 ]]></content></entry><entry><title type="html">The importance of ICS security: pervasiveness of ICSs</title><link href="https://rlc.vlinder.ca/blog/2013/12/27/the-importance-of-ics-security-pervasiveness-of-icss"></link><published>2013-12-27T00:00:00.000Z</published><updated>2013-12-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/12/27/the-importance-of-ics-security-pervasiveness-of-icss</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/12/27/the-importance-of-ics-security-pervasiveness-of-icss"><![CDATA[ <p>Industrial Control Systems (ICSs) are becoming pervasive throughout all branches of industry and all parts of our infrastructure: they are a part of every part of the electricity grid, from the nuclear power station to your home; they&#39;re found in the traffic lights of virtually every crossing; they regulate train traffic; they run the cookie factory that makes your favorite cookies and pack the pills your doctor prescribed.</p>
 ]]></content></entry><entry><title type="html">The importance of ICS security: ICS communications</title><link href="https://rlc.vlinder.ca/blog/2013/12/27/the-importance-of-ics-security-ics-communications"></link><published>2013-12-27T00:00:00.000Z</published><updated>2013-12-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/12/27/the-importance-of-ics-security-ics-communications</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/12/27/the-importance-of-ics-security-ics-communications"><![CDATA[ <p>For an ICS, having communications abilities generally means implementing some machine-to-machine communications protocol, such as DNP3 or Modbus. These protocols, which allow the device to report data to a &quot;master&quot; device and take their cue from those devices w.r.t. things they should be doing, are generally not designed with security in mind: most of them do not require, or expect, user authentication for any commands you might send them, and don&#39;t implement anything approaching what you&#39;d expect from, e.g., a bank (confidentiality, integrity, authentication, authorization, non-repudiation).</p>
 ]]></content></entry><entry><title type="html">Perl: Practical or Pathologically Eclectic? Both?</title><link href="https://rlc.vlinder.ca/blog/2013/11/30/perl-practical-or-pathologically-eclectic-both"></link><published>2013-11-30T00:00:00.000Z</published><updated>2013-11-30T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/11/30/perl-practical-or-pathologically-eclectic-both</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/11/30/perl-practical-or-pathologically-eclectic-both"><![CDATA[ <p>There are two canonical acronyms for Perl: &quot;Practical Extraction and Report Language&quot; and &quot;Pathologically Eclectic Rubbish Lister&quot;. Arguably, Perl can be both.</p>
 ]]></content></entry><entry><title type="html">A few thoughts on BitCoin</title><link href="https://rlc.vlinder.ca/blog/2013/11/28/a-few-thoughts-on-bitcoin"></link><published>2013-11-28T00:00:00.000Z</published><updated>2013-11-28T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/11/28/a-few-thoughts-on-bitcoin</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/11/28/a-few-thoughts-on-bitcoin"><![CDATA[ <p>Mindmap of a few thoughts on BitCoin I&#39;d meant to turn into prose (still might)</p>
 ]]></content></entry><entry><title type="html">Qt to quickly write a GUI app</title><link href="https://rlc.vlinder.ca/blog/2013/09/29/qt-to-quickly-write-a-gui-app"></link><published>2013-09-29T00:00:00.000Z</published><updated>2013-09-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/09/29/qt-to-quickly-write-a-gui-app</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/09/29/qt-to-quickly-write-a-gui-app"><![CDATA[ <p>Today, my wife asked me to write an app that would tell her to sit straight every 15 minutes. I know apps like that already exist and I could&#39;ve pointed her to one, but I decided to write one myself. The result is tannez-moi (which is French for &quot;bother me&quot;).</p>
 ]]></content></entry><entry><title type="html">The benefits of formal, executable specifications</title><link href="https://rlc.vlinder.ca/blog/2013/09/25/the-benefits-of-formal-executable-specifications"></link><published>2013-09-25T00:00:00.000Z</published><updated>2013-09-25T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/09/25/the-benefits-of-formal-executable-specifications</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/09/25/the-benefits-of-formal-executable-specifications"><![CDATA[ <p>While a specification should not specify the C++ code that should be implemented for the specified feature, it should specify the feature in a verifiable manner. In some cases, formal -- and even executable -- specifications can be of great help.</p>
 ]]></content></entry><entry><title type="html">Why #fixthathouse?</title><link href="https://rlc.vlinder.ca/blog/2013/09/24/what-fixthathouse"></link><published>2013-09-24T00:00:00.000Z</published><updated>2013-09-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/09/24/what-fixthathouse</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/09/24/what-fixthathouse"><![CDATA[ <p>Those of you who follow me on Twitter might wonder why, all of a sudden, I started tweeting assertions with the #fixthathouse hashtag. The reason is simple, <a href="http://cbc.ca/thehouse">CBC The House</a> made me do it.</p>
 ]]></content></entry><entry><title type="html">Common nonsense: the charter of Quebec Values</title><link href="https://rlc.vlinder.ca/blog/2013/09/14/common-nonsense-the-charter-of-quebec-values"></link><published>2013-09-14T00:00:00.000Z</published><updated>2013-09-14T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/09/14/common-nonsense-the-charter-of-quebec-values</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/09/14/common-nonsense-the-charter-of-quebec-values"><![CDATA[ <p><a href="/assets/2013/09/20130913-211324.jpg"><img src="/assets/2013/09/20130913-211324.jpg" alt="20130913-211324.jpg"></a></p>
<p>Four of these need not apply for a government job in Quebec if the new PQ charter of values becomes law. Can you pick the one that might still get the job?</p>
 ]]></content></entry><entry><title type="html">Sometimes, your right hand should know what your left hand is doing</title><link href="https://rlc.vlinder.ca/blog/2013/09/05/sometimes-your-right-hand-should-know-what-your-left-hand-is-doing"></link><published>2013-09-05T00:00:00.000Z</published><updated>2013-09-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/09/05/sometimes-your-right-hand-should-know-what-your-left-hand-is-doing</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/09/05/sometimes-your-right-hand-should-know-what-your-left-hand-is-doing"><![CDATA[ <p>Especially if you&#39;re a compiler...</p>
 ]]></content></entry><entry><title type="html">Conditional in-place merge algorithm</title><link href="https://rlc.vlinder.ca/blog/2013/07/03/conditional-in-place-merge-algorithm"></link><published>2013-07-03T00:00:00.000Z</published><updated>2013-07-03T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/07/03/conditional-in-place-merge-algorithm</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/07/03/conditional-in-place-merge-algorithm"><![CDATA[ <p>Say you have a sorted sequence of objects.</p>
<p>Go ahead, say: &quot;I have a sorted sequence of objects!&quot;</p>
<p>Now say it&#39;s fairly cheap to copy those objects, you need to be space-efficient and your sequence may have partial duplicates -- i.e. objects that, under some conditions, could be merged together using some transformation.</p>
<p>OK, so don&#39;t say it. It&#39;s true anyway. Now we need an algorithm to</p>
<ol>
<li><p>check for each pair of objects in the sequence whether they can be transformed into a single object</p>
</li>
<li><p>apply the transformation if need be</p>
</li>
</ol>
<p>Let&#39;s have a look at that algorithm.</p>
 ]]></content></entry><entry><title type="html">Why I decided Vlinder Software should stop selling Funky</title><link href="https://rlc.vlinder.ca/blog/2013/06/10/why-i-decided-vlinder-software-should-stop-selling-funky"></link><published>2013-06-10T00:00:00.000Z</published><updated>2013-06-10T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/06/10/why-i-decided-vlinder-software-should-stop-selling-funky</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/06/10/why-i-decided-vlinder-software-should-stop-selling-funky"><![CDATA[ <p>If you follow the News feed from <a href="http://vlinder.ca">Vlinder Software&#39;s site</a> you know that I&#39;ve posted an announcement saying Funky is now in its end-of-life cycle. This is our first product to enter end-of-life, but what it basically means is that we won&#39;t actively work on improving the software anymore.</p>
<p>If you&#39;ve been following me for a while, you&#39;ll know that I am the founder and sole proprietor of Vlinder Software, as well as the CEO and an Analyst. I don&#39;t usually sign off as CEO, but this is one of those decisions that is mine alone to take. In this post, I will explain why.</p>
 ]]></content></entry><entry><title type="html">Structure alignment and padding</title><link href="https://rlc.vlinder.ca/blog/2013/03/05/structure-alignment-and-padding"></link><published>2013-03-05T00:00:00.000Z</published><updated>2013-03-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/03/05/structure-alignment-and-padding</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/03/05/structure-alignment-and-padding"><![CDATA[ <p>In my <a href="/blog/2012/12/how-to-design-a-struct-for-storage-or-networking/">previous post</a> on the subject, I talked about using magic numbers and versions, alignment, and later added a note about endianness after a suggestion from Michel Fortin. This time, I&#39;ll talk about padding, how the sizeof operator can be misleading and how to debug padding and alignment errors.</p>
 ]]></content></entry><entry><title type="html">Flawed ways of working: centrally managed version control</title><link href="https://rlc.vlinder.ca/blog/2013/01/18/flawed-ways-of-working-centrally-managed-version-control"></link><published>2013-01-18T00:00:00.000Z</published><updated>2013-01-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/01/18/flawed-ways-of-working-centrally-managed-version-control</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/01/18/flawed-ways-of-working-centrally-managed-version-control"><![CDATA[  ]]></content></entry><entry><title type="html">Minor changes in style</title><link href="https://rlc.vlinder.ca/blog/2013/01/08/minor-changes-in-style"></link><published>2013-01-08T00:00:00.000Z</published><updated>2013-01-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2013/01/08/minor-changes-in-style</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2013/01/08/minor-changes-in-style"><![CDATA[ <p>I am not usually one to make much of a fuss about coding style: as long as the code is easily readable, I don&#39;t much care whether you use tabs or spaces to indent, how you align your curly quotes, etc. There&#39;s really only two things I do care about when reading new code:</p>
<ol>
<li>is it easy to read the code without being misled by it?</li>
<li>does the new code integrate well with the rest of the code?
I do have a few suggestions, though, but above all, I recognize it can be difficult to change habits -- and therefore to change one&#39;s coding style.</li>
</ol>
 ]]></content></entry><entry><title type="html">Even in Quebec, Winter is not the only season</title><link href="https://rlc.vlinder.ca/blog/2012/12/21/even-in-quebec-winter-is-not-the-only-season"></link><published>2012-12-21T00:00:00.000Z</published><updated>2012-12-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/12/21/even-in-quebec-winter-is-not-the-only-season</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/12/21/even-in-quebec-winter-is-not-the-only-season"><![CDATA[ <p>An just to remind myself and some of my colleagues, I drew this on the office whiteboard yesterday: <a href="/assets/2012/12/20121220-193947.jpg"><img src="/assets/2012/12/20121220-193947.jpg" alt="20121220-193947.jpg"></a></p>
 ]]></content></entry><entry><title type="html">What happens if structures aren't well-designed</title><link href="https://rlc.vlinder.ca/blog/2012/12/05/what-happens-if-structures-arent-well-designed"></link><published>2012-12-05T00:00:00.000Z</published><updated>2012-12-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/12/05/what-happens-if-structures-arent-well-designed</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/12/05/what-happens-if-structures-arent-well-designed"><![CDATA[ <p>In my <a href="/blog/2012/12/how-to-design-a-struct-for-storage-or-networking/">previous post</a>, I explained how to design a structure for persisting and communicating. I didn&#39;t say why I explained it -- just that things get frustrating if these simple rules aren&#39;t followed. In this post, I will tell you why I wrote the previous one.</p>
 ]]></content></entry><entry><title type="html">How to design a struct for storage or communicating</title><link href="https://rlc.vlinder.ca/blog/2012/12/05/how-to-design-a-struct-for-storage-or-networking"></link><published>2012-12-05T00:00:00.000Z</published><updated>2012-12-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/12/05/how-to-design-a-struct-for-storage-or-networking</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/12/05/how-to-design-a-struct-for-storage-or-networking"><![CDATA[ <p>One of the most common ways of &quot;persisting&quot; or communicating data in an embedded device is to just dump it into persistent storage or onto the wire: rather than generating XML, JSON or some other format which would later have to be parsed and which takes a lot of resources both ways, both in terms of CPU time to generate and parse and in terms of storage overhead, dumping binary data into storage or onto the wire has only the -- inevitable -- overhead of accessing storage/the wire itself. There are, however, several caveats to this, some of which I run into on a more-or-less regular basis when trying to decipher some of that data, so in stead of just being frustrated with hard-to-decipher data, I choose to describe how it should be done in stead.</p>
<p>Note that I am by no means advocating anything more than a few simple rules to follow when dumping data. Particularly, I am <em>not</em> going to advocate using XML, JSON or any other intermediary form: each of those has their place, but they neither should be considered to solve the problems faced when trying to access binary data, nor can they replace binary data.</p>
 ]]></content></entry><entry><title type="html">Exceptions and Embedded Devices</title><link href="https://rlc.vlinder.ca/blog/2012/11/08/exceptions-and-embedded-devices"></link><published>2012-11-08T00:00:00.000Z</published><updated>2012-11-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/11/08/exceptions-and-embedded-devices</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/11/08/exceptions-and-embedded-devices"><![CDATA[ <p>Lately, I&#39;ve had a number of discussions on this subject, in which the same questions cropped up again and again:</p>
<ol>
<li><p>should exceptions be used in embedded devices?</p>
</li>
<li><p>should exceptions occur in &quot;normal operation&quot; (i.e. is every exception a bug)?</p>
</li>
</ol>
<p>My answer to these two questions are yes and yes (no) resp.: exceptions can and should be used (appropriately) in embedded devices and exceptions may occur during normal operation (i.e. not every exception that occurs is a bug).</p>
 ]]></content></entry><entry><title type="html">Quick Summary: Synchronization in Next-Generation Telecom Networks</title><link href="https://rlc.vlinder.ca/blog/2012/10/18/quick-summary-synchronization-in-next-generation-telecom-networks"></link><published>2012-10-18T00:00:00.000Z</published><updated>2012-10-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/10/18/quick-summary-synchronization-in-next-generation-telecom-networks</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/10/18/quick-summary-synchronization-in-next-generation-telecom-networks"><![CDATA[ <p>This is a quick summary of the <a href="https://web.archive.org/web/20160620200541/http://webcast.you-niversity.com/youtools/companies/viewarchives.asp?account=395247&affiliateId=99&routing=b2d50ec7&stm=PDKIKX0D">ComSoc webinar on Synchronization in Next-Generation Telecom Networks</a></p>
<p>Over the last few years, communications networks have changed radically: their use has gone from predominantly voice to predominantly data and they have themselves gone from predominantly synchronous networks to predominantly packet networks.</p>
<p>Time synchronization requirements, in terms of quality of time, have only gotten stricter, so new methods for clock synchronization are now required - i.e. NTP can&#39;t do the job to the level of accuracy that&#39;s needed.</p>
 ]]></content></entry><entry><title type="html">On the importance of clear technical specifications</title><link href="https://rlc.vlinder.ca/blog/2012/08/27/on-the-importance-of-clear-technical-specifications"></link><published>2012-08-27T00:00:00.000Z</published><updated>2012-08-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/08/27/on-the-importance-of-clear-technical-specifications</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/08/27/on-the-importance-of-clear-technical-specifications"><![CDATA[ <p>Even when the code is working like a charm, technical specifications -- and their different interpretations by different people -- can lead to confusion and hours-long debugging sessions.</p>
 ]]></content></entry><entry><title type="html">Hidden complexity</title><link href="https://rlc.vlinder.ca/blog/2012/08/16/hidden-complexity"></link><published>2012-08-16T00:00:00.000Z</published><updated>2012-08-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/08/16/hidden-complexity</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/08/16/hidden-complexity"><![CDATA[ <p>It really surprises me sometimes how much you can have to explain about simple things.</p>
 ]]></content></entry><entry><title type="html">Plain and clear cases of "don't do that - fix your code in stead"</title><link href="https://rlc.vlinder.ca/blog/2012/08/02/plain-and-clear-cases-of-dont-do-that-fix-your-code-in-stead"></link><published>2012-08-02T00:00:00.000Z</published><updated>2012-08-02T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/08/02/plain-and-clear-cases-of-dont-do-that-fix-your-code-in-stead</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/08/02/plain-and-clear-cases-of-dont-do-that-fix-your-code-in-stead"><![CDATA[ <p>For the last few days, a <a href="https://groups.google.com/forum/m/?fromgroups#!topic/comp.lang.c/YAuFFz7SmVc">discussion</a> (that has become heated from time to time) has been going on on the comp.lang.c usenet group. The subject is a &quot;signal anomaly&quot;: the OP wants to catch SIGSEGV and carry on along its merry way.</p>
 ]]></content></entry><entry><title type="html">When hardware foils software -- and then helps it out!</title><link href="https://rlc.vlinder.ca/blog/2012/07/19/when-hardware-foils-software-and-then-helps-it-out"></link><published>2012-07-19T00:00:00.000Z</published><updated>2012-07-19T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/07/19/when-hardware-foils-software-and-then-helps-it-out</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/07/19/when-hardware-foils-software-and-then-helps-it-out"><![CDATA[ <p>Sometimes, an oscilloscope can come in very handy.</p>
 ]]></content></entry><entry><title type="html">Please use my time wisely</title><link href="https://rlc.vlinder.ca/blog/2012/07/09/please-use-my-time-wisely"></link><published>2012-07-09T00:00:00.000Z</published><updated>2012-07-09T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/07/09/please-use-my-time-wisely</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/07/09/please-use-my-time-wisely"><![CDATA[ <p>Just because I charge by the hour, that doesn&#39;t mean you should be wasting my time...</p>
<p>This morning, in the wee hours of the morning (time differences can keep you up at night, as can young children), I spent more than an hour and a half doing makework. Most of that work, probably all of it, could have been avoided if I&#39;d been given a working setup rather than a huge chunk of source code and a recipe to make it work. Granted, the recipe did work, but it was still a huge waste of time.</p>
 ]]></content></entry><entry><title type="html">Why CS shouldn't be taught before high school (and coding for kids is a bad idea)</title><link href="https://rlc.vlinder.ca/blog/2012/07/02/why-cs-shouldnt-be-taught-before-high-school-and-coding-for-kids-is-a-bad-idea"></link><published>2012-07-02T00:00:00.000Z</published><updated>2012-07-02T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/07/02/why-cs-shouldnt-be-taught-before-high-school-and-coding-for-kids-is-a-bad-idea</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/07/02/why-cs-shouldnt-be-taught-before-high-school-and-coding-for-kids-is-a-bad-idea"><![CDATA[ <p>An introduction to computer science was part of my high school curriculum. I was about 16 years old at the time and had been coding in Basic and Pascal for a few years already - I was just getting started with C. This part of the curriculum was a complete waste of time. Not because I had books that taught me better than my teacher ever could, but because, in order to make it easier for us, the programming language we had to use was a version of Pascal ... translated to Dutch.</p>
 ]]></content></entry><entry><title type="html">Sometimes, use-cases just aren't what you need</title><link href="https://rlc.vlinder.ca/blog/2012/06/29/sometimes-use-cases-just-arent-what-you-need"></link><published>2012-06-29T00:00:00.000Z</published><updated>2012-06-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/06/29/sometimes-use-cases-just-arent-what-you-need</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/06/29/sometimes-use-cases-just-arent-what-you-need"><![CDATA[ <p>I&#39;ve written about use-cases on this blog before (parts <a href="/blog/2010/02/use-cases-part-1-introduction-ingredients/">one</a>, <a href="/blog/2010/02/use-cases-part-2-what-use-cases-are-for-the-history-present-and-future-of-use-cases/">two</a> and <a href="/blog/2010/03/use-cases-part-3-what-a-use-case-really-is/">three</a> of the sidebar on use-cases in my podcast come to mind) but I haven&#39;t really talked about when to avoid them.</p>
<p>When you get a new piece of hardware and a vague set of requirements, what do you do?</p>
<ol>
<li>try to get the most out of the hardware you possible can</li>
<li>design to meet the need, using use-cases to guide you</li>
<li>a bit of <strong>a</strong>, a bit of <strong>b</strong></li>
<li>other... (leave a comment)</li>
</ol>
 ]]></content></entry><entry><title type="html">Robustness analysis: the fundamentals</title><link href="https://rlc.vlinder.ca/blog/2012/06/02/robustness-analysis-the-fundamentals"></link><published>2012-06-02T00:00:00.000Z</published><updated>2012-06-02T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/06/02/robustness-analysis-the-fundamentals</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/06/02/robustness-analysis-the-fundamentals"><![CDATA[ <p>Up until 2008, the global economy was humming along on what seemed like smooth sailing, doing a nice twenty knots on clear waters, with only an occasional radio message saying there were icebergs up ahead. Surely none of that was anything to be worried about: this new economy was well-designed, after all. Redundant and unnecessary checks had been removed but, in order for the economy to be robust, the engineers of the economy had made sure that at least two whole compartments could be flooded before anything really nasty would happen.</p>
<p>Sound familiar?</p>
 ]]></content></entry><entry><title type="html">Robustness analysis: finding fault(s)</title><link href="https://rlc.vlinder.ca/blog/2012/03/25/robustness-analysis-finding-faults"></link><published>2012-03-25T00:00:00.000Z</published><updated>2012-03-25T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/03/25/robustness-analysis-finding-faults</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/03/25/robustness-analysis-finding-faults"><![CDATA[ <p>When working on a large project, implementing a system that has to run 24/7 and handle significant peak loads of communication, at some point, you have to ask yourself how robust your solution really is. You have to ascertain that it meets the goals you have set out and will consistently do so. There are diverse ways of doing this. Some are more efficient than others. In this article, I will discuss some of the methods I have found useful in the past.</p>
 ]]></content></entry><entry><title type="html">I'll be back (soon)</title><link href="https://rlc.vlinder.ca/blog/2012/03/04/ill-be-back-soon"></link><published>2012-03-04T00:00:00.000Z</published><updated>2012-03-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/03/04/ill-be-back-soon</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/03/04/ill-be-back-soon"><![CDATA[ <p>Those of you who have been following this blog or the podcast may be wondering why I&#39;ve been silent lately. The answer to that is simple: lack of sleep. My baby boy is starting to sleep nights, though, and some time should hopefully clear in my schedule to pick up the podcast where I left it, and to write some more posts on this blog. In the mean time: patience is a virtue -- and sleep an under-rated commodity.</p>
 ]]></content></entry><entry><title type="html">Changing an API in subtle, unpredictable ways</title><link href="https://rlc.vlinder.ca/blog/2012/01/12/changing-an-api-in-subtle-unpredictable-ways"></link><published>2012-01-12T00:00:00.000Z</published><updated>2012-01-12T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/01/12/changing-an-api-in-subtle-unpredictable-ways</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/01/12/changing-an-api-in-subtle-unpredictable-ways"><![CDATA[ <p>Many seasoned Windows systems programmers will know that you can wait for the death of a thread with <code>WaitForSingleObject</code> and for the deaths of multiple threads with its bigger brother, <code>WaitForMultipleObjects</code>. Big brother changes its behavior on some platforms, though -- as I just found out myself, the hard way.</p>
 ]]></content></entry><entry><title type="html">Opening a support ticket with Microsoft (or: how not to support your customers)</title><link href="https://rlc.vlinder.ca/blog/2012/01/11/opening-a-support-ticket-with-microsoft-or-how-not-to-support-your-customers"></link><published>2012-01-11T00:00:00.000Z</published><updated>2012-01-11T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/01/11/opening-a-support-ticket-with-microsoft-or-how-not-to-support-your-customers</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/01/11/opening-a-support-ticket-with-microsoft-or-how-not-to-support-your-customers"><![CDATA[ <p>I had to open a support ticket with Microsoft today: I found a bug in the TCP/IP stack of Windows Embedded Compact 7 that I wanted them to know about (and to fix). I also wanted to know when it would be <em>fixed</em> -- after all, the bug is critical and the company I work for is a Microsoft Gold partner, so I had a reasonably high expectation of service.</p>
<p>Suffice it to say I was disappointed.</p>
 ]]></content></entry><entry><title type="html">Winter wallpapers</title><link href="https://rlc.vlinder.ca/blog/2012/01/01/winter-wallpapers"></link><published>2012-01-01T00:00:00.000Z</published><updated>2012-01-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2012/01/01/winter-wallpapers</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2012/01/01/winter-wallpapers"><![CDATA[ <p>As has become my custom (at least since this summer) I&#39;ve changed the theme a few days go, at the start of the season. Here are the associated wallpaper images...</p>
 ]]></content></entry><entry><title type="html">Sleep(...)</title><link href="https://rlc.vlinder.ca/blog/2011/12/01/sleep"></link><published>2011-12-01T00:00:00.000Z</published><updated>2011-12-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/12/01/sleep</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/12/01/sleep"><![CDATA[ <p>For those of you waiting for the next installment of &quot;C++ for the self-taught&quot;: I&#39;m on parental leave at the moment. The podcast (and the rest of the blog) will be back in a few weeks.</p>
 ]]></content></entry><entry><title type="html">Radix Sort</title><link href="https://rlc.vlinder.ca/blog/2011/11/08/radix-sort"></link><published>2011-11-08T00:00:00.000Z</published><updated>2011-11-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/11/08/radix-sort</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/11/08/radix-sort"><![CDATA[ <p><img src="/assets/2011/11/wpid-IMG_20111107_191330.jpg" alt="image"></p>
<p>The Radix Sort algorithm is a stable sorting algorithm that allows you to sort a series of numerical values in linear time. What amazed me, however, is that it is also a natural approach to sorting: this is a picture of my daughter applying a radix sort to her homework (without knowing it&#39;s a radix sort, of course, but after explaining the algorithm perfectly)!</p>
 ]]></content></entry><entry><title type="html">The underestimated legacy of Dennis Ritchie</title><link href="https://rlc.vlinder.ca/blog/2011/10/17/the-underestimated-legacy-of-dennis-ritchie"></link><published>2011-10-17T00:00:00.000Z</published><updated>2011-10-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/10/17/the-underestimated-legacy-of-dennis-ritchie</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/10/17/the-underestimated-legacy-of-dennis-ritchie"><![CDATA[ <p>Dennis Ritchie is the inventor of the C programming language, which is the ancestor of a whole family of programming languages that includes C++, Java and C# -- probably the three most popular programming languages today -- as well as D and Objective-C, which are less popular but significant nonetheless.</p>
 ]]></content></entry><entry><title type="html">Making the enabling of online copyright infringement itself an infringement of copyright</title><link href="https://rlc.vlinder.ca/blog/2011/10/09/making-the-enabling-of-online-copyright-infringement-itself-an-infringement-of-copyright"></link><published>2011-10-09T00:00:00.000Z</published><updated>2011-10-09T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/10/09/making-the-enabling-of-online-copyright-infringement-itself-an-infringement-of-copyright</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/10/09/making-the-enabling-of-online-copyright-infringement-itself-an-infringement-of-copyright"><![CDATA[ <p><a href="https://web.archive.org/web/20111221034832/http://www.parl.gc.ca/LegisInfo/BillDetails.aspx?billId=5134851&Language=E&Mode=1">Bill C-11</a> amends the Copyright Act in several different ways. One of the states purposes of those amendments is to &quot;make the enabling of online copyright infringement itself an infringement of copyright&quot;. While I can understand that this adds significant new protections to copyrighted materials, I think this may quickly become either unenforceable, or introduce serious new restrictions on how communications over the Internet can legally take place. It all hinges on the definition of &quot;enabling&quot;, however.</p>
 ]]></content></entry><entry><title type="html">Harper government reintroduces toughened online copyright law</title><link href="https://rlc.vlinder.ca/blog/2011/09/29/harper-government-reintroduces-toughened-online-copyright-law"></link><published>2011-09-29T00:00:00.000Z</published><updated>2011-09-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/09/29/harper-government-reintroduces-toughened-online-copyright-law</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/09/29/harper-government-reintroduces-toughened-online-copyright-law"><![CDATA[ <p>In the Vancouver Sun: bill C-32 from last session has been re-introduced (probably with some modification -- I haven&#39;t had a chance to read the bill yet) and is far more likely to pass, now that there&#39;s a conservative majority in Parliament.</p>
<p><strong>Update Oct 8, 2008:</strong> the re-introduced Copyright Modernization Act is numbered C-11, and is available <a href="https://web.archive.org/web/20111221034832/http://www.parl.gc.ca/LegisInfo/BillDetails.aspx?billId=5134851&Language=E&Mode=1">here</a>.</p>
 ]]></content></entry><entry><title type="html">Autumn is here - and so is the autumn banner</title><link href="https://rlc.vlinder.ca/blog/2011/09/29/autumn-is-here-and-so-is-the-autumn-banner"></link><published>2011-09-29T00:00:00.000Z</published><updated>2011-09-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/09/29/autumn-is-here-and-so-is-the-autumn-banner</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/09/29/autumn-is-here-and-so-is-the-autumn-banner"><![CDATA[ <p>OK, autumn has been here for about a week already, and the banner was ready two months ago, but I only now had both the time and the inclination to put it up...</p>
<p>You might remember that the corresponding desktop wallpapers are in the <a href="http://rlc.vlinder.ca/blog/2011/07/happy-canada-day/">Canada Day post</a>.</p>
 ]]></content></entry><entry><title type="html">Moving to GitHub</title><link href="https://rlc.vlinder.ca/blog/2011/08/12/moving-to-github"></link><published>2011-08-12T00:00:00.000Z</published><updated>2011-08-12T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/08/12/moving-to-github</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/08/12/moving-to-github"><![CDATA[ <p>I will be moving my open source projects (yes, all of them) to GitHub.</p>
 ]]></content></entry><entry><title type="html">Eclipse: kudos</title><link href="https://rlc.vlinder.ca/blog/2011/07/28/eclipse-kudos"></link><published>2011-07-28T00:00:00.000Z</published><updated>2011-07-28T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/07/28/eclipse-kudos</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/07/28/eclipse-kudos"><![CDATA[ <p>One of the things I like about Eclipse is the way it is designed. I&#39;m not talking about the GUI when I say that - although the GUI is arguably well-designed as well: I mean the way hundreds of pieces fit together to make Eclipse an IDE for Java, C, C++, PHP, Python, ..., etc.</p>
 ]]></content></entry><entry><title type="html">You, according to Google Analytics</title><link href="https://rlc.vlinder.ca/blog/2011/07/22/you-according-to-google-analytics"></link><published>2011-07-22T00:00:00.000Z</published><updated>2011-07-22T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/07/22/you-according-to-google-analytics</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/07/22/you-according-to-google-analytics"><![CDATA[ <p>This blog uses Google Analytics, which provides a treasure-trove of information about the site&#39;s visitors. To use that information to improve the site, it has to be parsed.</p>
<p>Here&#39;s a sketch of what a typical user may look like - and what that tells me about what I should do with the site.</p>
 ]]></content></entry><entry><title type="html">shtrict: a very restricted shell for *nix</title><link href="https://rlc.vlinder.ca/blog/2011/07/21/shtrict-a-very-restricted-shell-for-nix"></link><published>2011-07-21T00:00:00.000Z</published><updated>2011-07-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/07/21/shtrict-a-very-restricted-shell-for-nix</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/07/21/shtrict-a-very-restricted-shell-for-nix"><![CDATA[ <p>I needed a restricted shell for my shell server - the one that&#39;s available from outside my firewall, so I wrote one. You can download it under the terms of the GNU General Public License, version 3.</p>
 ]]></content></entry><entry><title type="html">New GnuPG key</title><link href="https://rlc.vlinder.ca/blog/2011/07/21/new-gnupg-key"></link><published>2011-07-21T00:00:00.000Z</published><updated>2011-07-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/07/21/new-gnupg-key</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/07/21/new-gnupg-key"><![CDATA[ <p>For those who want to be able to verify .deb packages I make: I have a new GnuPG key.</p>
<pre><code>Type bits/keyID     Date       User ID
pub  2048R/6D3CD07B 2011-07-20 Ronald Landheer-Cieslak (Software Analyst) &lt;rlc@vlinder.ca&gt;
     Hash=E0C9DE42CFF88A35CACE3EB488A1783E
     Fingerprint=9DAC FA3D D7A5 001F A0B2  DA59 5E0C 4AF1 6D3C D07B
</code></pre>
<p>You can download it from keys.gnupg.net</p>
 ]]></content></entry><entry><title type="html">From #NotW in the GMT morning to #UBB in the EDT afternoon -- an example of devoted journalism</title><link href="https://rlc.vlinder.ca/blog/2011/07/13/from-notw-in-the-gmt-morning-to-ubb-in-the-edt-afternoon-an-example-of-devoted-journalism"></link><published>2011-07-13T00:00:00.000Z</published><updated>2011-07-13T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/07/13/from-notw-in-the-gmt-morning-to-ubb-in-the-edt-afternoon-an-example-of-devoted-journalism</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/07/13/from-notw-in-the-gmt-morning-to-ubb-in-the-edt-afternoon-an-example-of-devoted-journalism"><![CDATA[ <p>I&#39;ve just been catching up on my Twitter account&#39;s updates for today, where possibly the only non-tech person I follow, a politics journalist from the CBC called Kady O&#39;Malley (@kady and @anotherkady) is still tweeting after 15 hours.</p>
<p>She started liveblogging the #NotW scandal in the UK this morning at 6 am and continued on the CRTC Usage-Based Billing hearings when those started.</p>
<p>This is the same Kady O&#39;Malley that answers the questions sent to CBC Radio&#39;s The House in the &quot;That&#39;s a good question&quot; section.</p>
<p>I already knew CBC Radio provides well-informed, balanced journalism (I don&#39;t watch TV so I don&#39;t know about CBC TV) but now I know how they do it: this is one example the people at News International should follow -- rather than hacking into people&#39;s voicemail and giving journalism a bad name.</p>
 ]]></content></entry><entry><title type="html">"Changer son fusil d'épaule"</title><link href="https://rlc.vlinder.ca/blog/2011/07/10/changer-son-fusil-depaule"></link><published>2011-07-10T00:00:00.000Z</published><updated>2011-07-10T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/07/10/changer-son-fusil-depaule</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/07/10/changer-son-fusil-depaule"><![CDATA[ <p>Sometimes, when all else fails, you have to change your tack.</p>
 ]]></content></entry><entry><title type="html">Happy Canada Day</title><link href="https://rlc.vlinder.ca/blog/2011/07/01/happy-canada-day"></link><published>2011-07-01T00:00:00.000Z</published><updated>2011-07-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/07/01/happy-canada-day</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/07/01/happy-canada-day"><![CDATA[ <p>On the occasion of Canada day, I thought I&#39;d put up the Canada-themed autumn wallpapers I&#39;d prepared.</p>
 ]]></content></entry><entry><title type="html">Hardware designers, please, think of us!</title><link href="https://rlc.vlinder.ca/blog/2011/06/27/hardware-designers-please-think-of-us"></link><published>2011-06-27T00:00:00.000Z</published><updated>2011-06-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/06/27/hardware-designers-please-think-of-us</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/06/27/hardware-designers-please-think-of-us"><![CDATA[ <p>One of the most time-consuming tasks in embedded software development can be device driver debugging. Especially if that debugging has to be done in a real-time system without disturbing its real-time characteristics. This usually amounts to producing an output signal on a pin of the CPU and probing the output to see what&#39;s going on. In order to be able to do that, the people who design the hardware have to keep in mind that the people who design the software will have some debugging to do on the final hardware -- even if it&#39;s just to make sure everything is working OK.</p>
 ]]></content></entry><entry><title type="html">Canada Post Labor Dispute -- Resolved?</title><link href="https://rlc.vlinder.ca/blog/2011/06/27/canada-post-labor-dispute-resolved"></link><published>2011-06-27T00:00:00.000Z</published><updated>2011-06-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/06/27/canada-post-labor-dispute-resolved</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/06/27/canada-post-labor-dispute-resolved"><![CDATA[ <p>I&#39;ve been watching the Canada Post labor dispute from afar over Twitter and saw the back-to-work bill pass on third reading. Does that mean the dispute is over? I don&#39;t think so...</p>
 ]]></content></entry><entry><title type="html">Lonely Planet's Travel Top Ten</title><link href="https://rlc.vlinder.ca/blog/2011/06/25/lonely-planets-travel-top-ten"></link><published>2011-06-25T00:00:00.000Z</published><updated>2011-06-25T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/06/25/lonely-planets-travel-top-ten</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/06/25/lonely-planets-travel-top-ten"><![CDATA[ <p>Lonely Planet came out with a book on their top-ten places to visit recently. In light of recent events, some of their choices merit revision and as I don&#39;t have anything better to do right now, I thought I&#39;d do a bit of revision on my iPod...</p>
 ]]></content></entry><entry><title type="html">The Manchester Baby is 63 years old today</title><link href="https://rlc.vlinder.ca/blog/2011/06/21/the-manchester-baby-is-63-years-old-today"></link><published>2011-06-21T00:00:00.000Z</published><updated>2011-06-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/06/21/the-manchester-baby-is-63-years-old-today</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/06/21/the-manchester-baby-is-63-years-old-today"><![CDATA[ <p>The first &quot;modern&quot; programmable computer with 32 words of memory, is 63 years old today.</p>
<p><a href="http://www.flickr.com/photos/lff10/4250382213/"><img src="http://farm3.static.flickr.com/2767/4250382213_21f3d837c5_z.jpg?zz=1" alt="Manchester&#39;s Baby"></a></p>
<p>A revised history of the Manchester Baby, in two parts, by B. Jack Copeland from the University of Canterbury in Christchurch, New Zealand, is available <a href="http://doi.ieeecomputersociety.org/10.1109/MAHC.2010.1">here</a> and <a href="http://doi.ieeecomputersociety.org/10.1109/MAHC.2010.2">here</a> -- a really
interesting read.</p>
 ]]></content></entry><entry><title type="html">Summer is here</title><link href="https://rlc.vlinder.ca/blog/2011/06/17/summer-is-here"></link><published>2011-06-17T00:00:00.000Z</published><updated>2011-06-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/06/17/summer-is-here</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/06/17/summer-is-here"><![CDATA[ <p><a href="http://en.wikipedia.org/wiki/Summer#Timing">Summer is here</a>, so it&#39;s time to update desktop backgrounds and site headers with something a bit more summery.</p>
<p>This wallpaper of course has the Vlinder logo and the url of this website but, more prominently, it has a lily flower - which also figures prominently (but stylized) on the flag of the Canadian province I live in.</p>
 ]]></content></entry><entry><title type="html">Functional Programming at Compile-Time</title><link href="https://rlc.vlinder.ca/blog/2011/06/04/functional-programming-at-compile-time-cpp4theselftaught"></link><published>2011-06-04T00:00:00.000Z</published><updated>2011-06-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/06/04/functional-programming-at-compile-time-cpp4theselftaught</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/06/04/functional-programming-at-compile-time-cpp4theselftaught"><![CDATA[ <p>In the <a href="/blog/2011/05/using-ranges-and-functional-programming-in-c-cpp4theselftaught/">previous installment</a> I talked about functional programming a bit, introducing the idea of <em>functors</em> and <em>lambda expressions</em>. This time, we will look at another type of functional programming: a type that is done at compile-time.</p>
 ]]></content></entry><entry><title type="html">From XKCD.com: Copyright</title><link href="https://rlc.vlinder.ca/blog/2011/05/24/from-xkcd-com-copyright"></link><published>2011-05-24T00:00:00.000Z</published><updated>2011-05-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/05/24/from-xkcd-com-copyright</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/05/24/from-xkcd-com-copyright"><![CDATA[ <p><a href="http://xkcd.com/14/"><img src="http://imgs.xkcd.com/comics/copyright.jpg" alt="Copyright"></a></p>
 ]]></content></entry><entry><title type="html">Using Ranges and Functional Programming in C++</title><link href="https://rlc.vlinder.ca/blog/2011/05/20/using-ranges-and-functional-programming-in-c-cpp4theselftaught"></link><published>2011-05-20T00:00:00.000Z</published><updated>2011-05-20T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/05/20/using-ranges-and-functional-programming-in-c-cpp4theselftaught</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/05/20/using-ranges-and-functional-programming-in-c-cpp4theselftaught"><![CDATA[ <p>C++ is a very versatile language. Among other things, you can do generic meta-programming and functional programming in C++, as well as the better-known facilities for procedural and object-oriented programming. In this installment, we will look at the functional programming facilities in the now-current C++ standard (C++03) as well as the upcoming C++0x standard. We will look at what a <em>closure</em> is and how to apply one to a range, but we will first look at some simpler uses of ranges -- to warm up.</p>
 ]]></content></entry><entry><title type="html">Starting Python - 99 bottles of beer</title><link href="https://rlc.vlinder.ca/blog/2011/05/08/starting-python-99-bottles-of-beer"></link><published>2011-05-08T00:00:00.000Z</published><updated>2011-05-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/05/08/starting-python-99-bottles-of-beer</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/05/08/starting-python-99-bottles-of-beer"><![CDATA[ <p>After a brief discussion on the subject on StackOverflow chat, I&#39;ve decided to try my hand at Python, using the on-line IDE at <a href="http://ideone.com">Ideone.com</a>.
<a href="https://ideone.com/ummB0">Here</a> is my rendering of &quot;99 bottles of beer&quot; in Python...</p>
 ]]></content></entry><entry><title type="html">Why I Recommend BrainF--- (and what I recommend it for)</title><link href="https://rlc.vlinder.ca/blog/2011/05/05/why-i-recommend-brainf-and-what-i-recommend-it-for"></link><published>2011-05-05T00:00:00.000Z</published><updated>2011-05-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/05/05/why-i-recommend-brainf-and-what-i-recommend-it-for</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/05/05/why-i-recommend-brainf-and-what-i-recommend-it-for"><![CDATA[ <p>BrainFuck is an esoteric Turing-complete programming language that consists of only the bare minimum commands for Turing-completeness. It is exactly this bare-minimum-ness that makes it an interesting language - although at first a bit awkward to wrap your head around.</p>
<pre><code>&gt;&gt;++++[&lt;+++++&gt;-]&lt;+++[&lt;+++++&gt;-]&lt;-.------.---------.&gt;&gt;++++++++[&lt;++++
++++&gt;-]&lt;.[-]++++[&lt;+++++&gt;-]&lt;-.----------.---.+++++.----------.+.+++
++++++++++.&gt;&gt;+++++++[&lt;+++++++&gt;-]&lt;---.[-]+++[&lt;-----&gt;-]&lt;.--.
</code></pre>
 ]]></content></entry><entry><title type="html">Shining light on bugs: testing</title><link href="https://rlc.vlinder.ca/blog/2011/04/14/shining-light-on-bugs-testing"></link><published>2011-04-14T00:00:00.000Z</published><updated>2011-04-14T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/04/14/shining-light-on-bugs-testing</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/04/14/shining-light-on-bugs-testing"><![CDATA[ <p>Bugs like to hide in the darker corners of the code: the parts that are least exercised, less well-structured. They don&#39;t react to light very well. tests are like a spotlight that you shine upon specific pieces of the code. The first time you do that -- especially if the code has been around a while -- the bugs will come crawling out of the woodworks.</p>
 ]]></content></entry><entry><title type="html">C++0b</title><link href="https://rlc.vlinder.ca/blog/2011/03/26/c0b"></link><published>2011-03-26T00:00:00.000Z</published><updated>2011-03-26T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/03/26/c0b</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/03/26/c0b"><![CDATA[ <p>The C++ standard committee has been meeting in Madrid and has, according to the latest news, approved the new C++ standard. <a href="https://web.archive.org/web/20160611151934/https://www.ibm.com/developerworks/mydeveloperworks/blogs/5894415f-be62-4bc0-81c5-3956e82276f3/entry/the_c_0x_standard_has_been_approved_to_ship23?lang=en">As Michael Wong said on his C/C++ Cafe Blog</a>, C++0x is now C++0b -- though it might be C++0c by the time ISO gets done with it.</p>
 ]]></content></entry><entry><title type="html">Ranges</title><link href="https://rlc.vlinder.ca/blog/2011/03/17/ranges"></link><published>2011-03-17T00:00:00.000Z</published><updated>2011-03-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/03/17/ranges</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/03/17/ranges"><![CDATA[  ]]></content></entry><entry><title type="html">Geek Mythology: Women and the Start of Software Engineering</title><link href="https://rlc.vlinder.ca/blog/2011/03/08/geek-mythology-women-and-the-start-of-software-engineering"></link><published>2011-03-08T00:00:00.000Z</published><updated>2011-03-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/03/08/geek-mythology-women-and-the-start-of-software-engineering</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/03/08/geek-mythology-women-and-the-start-of-software-engineering"><![CDATA[ <p>According to Geek mythology, when Charles Babbage had invented the Analytical Engine, he sat back and said: &quot;Behold! I have created the first pocket calculator!&quot;. Of course, he hadn&#39;t actually built the thing yet, and lacket the practical skill to do so. When it finally was built, there wasn&#39;t a pocket large enough on Earth to put it in. Thus was the inception of the hardware engineering discipline.</p>
<p>While hardware had gotten off to a good start, software took a more practical approach: when Ada Lovelace heard of the Analytical Engine, she said to herself: &quot;Forsooth, such a mighty machine needeth a <em>touche feminine</em> if ever it is to serve a purpose&quot; and proceeded to write the first computer program. It took several decades for the hardware engineering discipline to catch up with the software engineering discipline and for the two to come together and actually do something useful.</p>
 ]]></content></entry><entry><title type="html">The Evolution of the Software Engineering Practice Faced With The Knowledge That "Bugs Must Exist"</title><link href="https://rlc.vlinder.ca/blog/2011/03/06/the-evolution-of-the-software-engineering-practice-faced-with-the-knowledge-that-bugs-must-exist"></link><published>2011-03-06T00:00:00.000Z</published><updated>2011-03-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/03/06/the-evolution-of-the-software-engineering-practice-faced-with-the-knowledge-that-bugs-must-exist</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/03/06/the-evolution-of-the-software-engineering-practice-faced-with-the-knowledge-that-bugs-must-exist"><![CDATA[ <p>Though laudable, the quest for bug-free software is doomed to failure. This should be news to no-one as the argument for this is as old as I am.</p>
 ]]></content></entry><entry><title type="html">A bulldog approach to bugs</title><link href="https://rlc.vlinder.ca/blog/2011/03/02/a-bulldog-approach-to-bugs"></link><published>2011-03-02T00:00:00.000Z</published><updated>2011-03-02T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/03/02/a-bulldog-approach-to-bugs</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/03/02/a-bulldog-approach-to-bugs"><![CDATA[ <p>The only bugs I like are butterflies - and even then, only a specific blue butterfly that happens to be a drawing. Aside from those, I spend a lot of time rooting them out.</p>
<p>I advocate what you might call a bulldog approach to bugs: track them, hunt them down, kill them. Don&#39;t let go until you&#39;re sure they&#39;re dead. This might seem overly agressive, but remember we&#39;re talking about software errors here - not actual living beings.</p>
 ]]></content></entry><entry><title type="html">Applying the Barton-Nackman idiom</title><link href="https://rlc.vlinder.ca/blog/2011/02/20/applying-the-barton-nackman-idiom"></link><published>2011-02-20T00:00:00.000Z</published><updated>2011-02-20T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/02/20/applying-the-barton-nackman-idiom</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/02/20/applying-the-barton-nackman-idiom"><![CDATA[ <p>It is amazing how much code you can cram into a single line, and how much magic happens behind the scenes when you do.</p>
 ]]></content></entry><entry><title type="html">A "brilliant" idea (?)</title><link href="https://rlc.vlinder.ca/blog/2011/02/17/a-brilliant-idea"></link><published>2011-02-17T00:00:00.000Z</published><updated>2011-02-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/02/17/a-brilliant-idea</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/02/17/a-brilliant-idea"><![CDATA[ <p>For a few days now, I&#39;ve been carrying an idea around for a new app I could really use for my projects: something that integrates requirements management, risk management, workflow, billing, bug/issue tracking, action items, etc. with the code repositories. Wouldn&#39;t that be fun?</p>
 ]]></content></entry><entry><title type="html">undefined</title><link href="https://rlc.vlinder.ca/blog/2011/02/09/the-art-and-science-of-risk-management"></link><published>2011-02-09T00:00:00.000Z</published><updated>2011-02-09T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/02/09/the-art-and-science-of-risk-management</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/02/09/the-art-and-science-of-risk-management"><![CDATA[ <p>I like to take a rational approach to risk management: identify risks and opportunities, their probability and their impact, maximize the impact and probability of opportunities and minimize those of risks. In this article, I explain a bit of my approach, I expound upon risk dependencies, based on a recent article by Tak Wah Kwan and Hareton K.N. Leung, and I offer some practical advice.</p>
 ]]></content></entry><entry><title type="html">The Observer Pattern</title><link href="https://rlc.vlinder.ca/blog/2011/02/06/the-observer-pattern-cpp4theselftaught"></link><published>2011-02-06T00:00:00.000Z</published><updated>2011-02-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/02/06/the-observer-pattern-cpp4theselftaught</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/02/06/the-observer-pattern-cpp4theselftaught"><![CDATA[ <p>In this installment of C++ for the self-taught, we will be looking at the Observer pattern: we will be starting the implementation of the proxy-part of our SOCKS server by accepting connections and servicing them.</p>
 ]]></content></entry><entry><title type="html">A new look and a new address</title><link href="https://rlc.vlinder.ca/blog/2011/02/02/a-new-look-and-a-new-address"></link><published>2011-02-02T00:00:00.000Z</published><updated>2011-02-02T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/02/02/a-new-look-and-a-new-address</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/02/02/a-new-look-and-a-new-address"><![CDATA[ <p>Due to some technical difficulties I was having with the previous installation of the software running this site, I decided to re-install the software from scratch and, while at it, change the address from landheer-cieslak.com to rlc.vlinder.ca. The look has been updated a bit and some further improvements will take place over the next few weeks.</p>
 ]]></content></entry><entry><title type="html">Security Awareness and Embedded Software</title><link href="https://rlc.vlinder.ca/blog/2011/01/10/security-awareness-and-embedded-software"></link><published>2011-01-10T00:00:00.000Z</published><updated>2011-01-10T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/01/10/security-awareness-and-embedded-software</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/01/10/security-awareness-and-embedded-software"><![CDATA[ <p>In a recent interview with Ivan Arce of Core Security Technologies by Gary McGraw of Cigital, Arce made the point that embedded systems are becoming a security issue. At about the same time, US Army General Keith B. Alexander, director of the US National Security Agency, said that a separate secure network needs to be created for critical civilian infrastructure. They are probably both right.</p>
 ]]></content></entry><entry><title type="html">How error messages can backfire</title><link href="https://rlc.vlinder.ca/blog/2011/01/07/how-error-messages-can-backfire"></link><published>2011-01-07T00:00:00.000Z</published><updated>2011-01-07T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2011/01/07/how-error-messages-can-backfire</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2011/01/07/how-error-messages-can-backfire"><![CDATA[ <p>Error messages should provide enough information for the user to correct their error, but they shouldn&#39;t provide any more than that, or malicious users could abuse them - as shown recently with the ASP.NET server.</p>
 ]]></content></entry><entry><title type="html">Testing Lock-Free Software</title><link href="https://rlc.vlinder.ca/blog/2010/12/10/testing-lock-free-software"></link><published>2010-12-10T00:00:00.000Z</published><updated>2010-12-10T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/12/10/testing-lock-free-software</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/12/10/testing-lock-free-software"><![CDATA[ <p>When a test has been running non-stop for over six months, beating the heck out of an algorithm, can we be confident the algorithm is OK?</p>
 ]]></content></entry><entry><title type="html">Event-driven software, step 1: select</title><link href="https://rlc.vlinder.ca/blog/2010/12/03/event-driven-software-step-1-select"></link><published>2010-12-03T00:00:00.000Z</published><updated>2010-12-03T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/12/03/event-driven-software-step-1-select</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/12/03/event-driven-software-step-1-select"><![CDATA[ <p>In this installment, we will look at the basic networking functions and start looking at event-driven software design. Starring in this installment will be the <code>select</code> function.</p>
 ]]></content></entry><entry><title type="html">More than the absence of problems</title><link href="https://rlc.vlinder.ca/blog/2010/11/19/more-than-the-absence-of-problems"></link><published>2010-11-19T00:00:00.000Z</published><updated>2010-11-19T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/11/19/more-than-the-absence-of-problems</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/11/19/more-than-the-absence-of-problems"><![CDATA[ <p>Quality can be defined in many ways: ISO defines quality relative to requirements as a measure of how well the object&#39;s characteristics meet those requirements. Those requirements can be specified (documented) or implied (customary). This has the advantage of making quality more or less measurable, but it has the disadvantage of making it harder to justify improving the product if the (minimum) requirements are met.</p>
<p>In my view, quality is a measure of excellence: it is more than the absence of problems and aims towards the prevention of problems.</p>
 ]]></content></entry><entry><title type="html">When the cup is full, carry it level</title><link href="https://rlc.vlinder.ca/blog/2010/11/18/cpp4theselftaught-when-the-cup-is-full-carry-it-level"></link><published>2010-11-18T00:00:00.000Z</published><updated>2010-11-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/11/18/cpp4theselftaught-when-the-cup-is-full-carry-it-level</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/11/18/cpp4theselftaught-when-the-cup-is-full-carry-it-level"><![CDATA[ <p>It is both a problem and a privilege to have too much work. It is a problem because, at some point, things don&#39;t get done and it is a privilege because it means, among other things, that people are trusting you with things to do.</p>
<p>The C++ for the self-taught podcast, however, is one of the things I am not getting done this time. I will, therefore, have to revert to the original, monthly, schedule for the time being, while I get all the work I have, done.</p>
 ]]></content></entry><entry><title type="html">Annoying Script Kiddies</title><link href="https://rlc.vlinder.ca/blog/2010/10/30/annoying-script-kiddies"></link><published>2010-10-30T00:00:00.000Z</published><updated>2010-10-30T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/10/30/annoying-script-kiddies</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/10/30/annoying-script-kiddies"><![CDATA[ <p>I don&#39;t host any of my sites, except for git.vlinder.ca, myself: my Internet connection isn&#39;t reliable enough, power outages are too frequent, and it&#39;s basically too much of a hassle. So, my sites are hosted by a professional hosting service and that service is responsible for the security of those sites. How annoying is it, then, when three of those sites get cracked through the FTP server?</p>
 ]]></content></entry><entry><title type="html">Events in SOA</title><link href="https://rlc.vlinder.ca/blog/2010/10/27/events-in-soa"></link><published>2010-10-27T00:00:00.000Z</published><updated>2010-10-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/10/27/events-in-soa</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/10/27/events-in-soa"><![CDATA[ <p>In a recent article <a href="https://web.archive.org/web/20201205153641/https://www.zdnet.com/article/gartner-soas-next-step-is-managing-events/">on ZDNet</a>, Joe McKendrick writes that Roy Schulte, the Gartner analyst who helped define the SOA space more than a decade ago, says as SOA becomes embedded into the digital enterprise realm, organizations are moving services to support event-driven interactions, versus request/reply interactions.</p>
<p>This, of course, is old news...</p>
 ]]></content></entry><entry><title type="html">Why IPv6 Matters</title><link href="https://rlc.vlinder.ca/blog/2010/10/23/why-ipv6-matters"></link><published>2010-10-23T00:00:00.000Z</published><updated>2010-10-23T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/10/23/why-ipv6-matters</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/10/23/why-ipv6-matters"><![CDATA[ <p>Given the rapid growth of the Internet, and the number of Internet-enabled devices, we are running out of IPv4 addresses - fast. This is a problem mostly for ISPs and large businesses who allocate their own public IP addresses from pools of addresses and sell or sub-let those addresses to .. us. When <em>they</em> run out of addresses, as with any finite resource, the <em>haves</em> will once again be pitted against the <em>have-nots</em> and the Internet will become less egalitarian. But that is not the only reason why you should be interested in IPv6: more important than the 340 trillion, trillion, trillion addresses that the 128-bit address space of IPv6 allows (as opposed to the &quot;mere&quot; four billion of IPv4) are IPv6&#39;s <em>other</em> features.</p>
 ]]></content></entry><entry><title type="html">Refactoring Exceptions</title><link href="https://rlc.vlinder.ca/blog/2010/10/17/cpp4theselftaught-refactoring-exceptions"></link><published>2010-10-17T00:00:00.000Z</published><updated>2010-10-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/10/17/cpp4theselftaught-refactoring-exceptions</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/10/17/cpp4theselftaught-refactoring-exceptions"><![CDATA[ <p>As I mentioned in the <a href="/blog/2010/10/negotiation-first-steps">previous installment</a>, our current way of handling exceptions leaves a few things to be desired. In this installment, we will fix that problem.</p>
 ]]></content></entry><entry><title type="html">Negotiation: first steps</title><link href="https://rlc.vlinder.ca/blog/2010/10/03/negotiation-first-steps"></link><published>2010-10-03T00:00:00.000Z</published><updated>2010-10-03T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/10/03/negotiation-first-steps</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/10/03/negotiation-first-steps"><![CDATA[ <p>As discussed <a href="/blog/2010/09/opacity-encapsulation-at-its-best-and-worst">last month</a>, the requirement for encapsulation pushes us towards allowing the user to know that there&#39;s a negotiation between the two peers, and does not alleviate the requirement that the user understand the errors. So in this installment, we will start using the new implementation of exceptions we worked out in the previous installment, and start on the negotiation mechanism from two installments ago.</p>
 ]]></content></entry><entry><title type="html">Is technology making us sick?</title><link href="https://rlc.vlinder.ca/blog/2010/09/29/is-technology-making-us-sick"></link><published>2010-09-29T00:00:00.000Z</published><updated>2010-09-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/09/29/is-technology-making-us-sick</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/09/29/is-technology-making-us-sick"><![CDATA[ <p>In my view, technology should make our lives easier - that&#39;s what I try to work for, that&#39;s what this blog is about and that, in general, is what at least fundamental research is aimed at. But are we going about it the wrong way? Is technology really making our lives harder, rather than easier?</p>
 ]]></content></entry><entry><title type="html">Updated: Not-so-permanent permalinks (all permalinks changed)</title><link href="https://rlc.vlinder.ca/blog/2010/09/21/not-so-permanent-permalinks-all-permalinks-changed"></link><published>2010-09-21T00:00:00.000Z</published><updated>2010-09-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/09/21/not-so-permanent-permalinks-all-permalinks-changed</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/09/21/not-so-permanent-permalinks-all-permalinks-changed"><![CDATA[ <p>Due to the addition of an important feature on the site, all permalinks for all posts have changed. Following the old links will send you to an error page where the the proposed options should include the page you&#39;re looking for.</p>
<p>Sorry for the inconvenience.</p>
<p><strong>2010-09-28</strong>: to make sure everything continues to work, I&#39;ll be using less pretty, but more effective permalinks as per the default of the blogging engine, from now on. Only one additional permalink is broken with this change, but it does actually fix a few bugs, so I guess I&#39;ll live with the one broken link.</p>
<p>Again, sorry for the inconvenience, but if all goes well, things will get <em>more</em> convenient from here on.</p>
 ]]></content></entry><entry><title type="html">Error handling in C++</title><link href="https://rlc.vlinder.ca/blog/2010/09/17/error-handling-in-cpp"></link><published>2010-09-17T00:00:00.000Z</published><updated>2010-09-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/09/17/error-handling-in-cpp</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/09/17/error-handling-in-cpp"><![CDATA[ <p>As far as error handling is concerned, C++ has all of the features and capabilities of C, but they are wholly inadequate in an object-oriented language. One very evident way in which C-style error handling is inadequate in an object-oriented language is in the implementation of a constructor of any non-trivial class, but this only becomes evident when we&#39;ve analyzed two things: the guarantees that any method (including special methods such as constructors and destructors) can give, and the <em>minimal</em> guarantees that each of these special methods <em>must</em> give.</p>
 ]]></content></entry><entry><title type="html">Bill #c32 seems to be getting less controversial</title><link href="https://rlc.vlinder.ca/blog/2010/09/14/bill-c32-seems-uncontroversial"></link><published>2010-09-14T00:00:00.000Z</published><updated>2010-09-14T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/09/14/bill-c32-seems-uncontroversial</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/09/14/bill-c32-seems-uncontroversial"><![CDATA[ <p>Copyright is an important part of my work: every time I sign a work-related contract, I have to make sure that I don&#39;t sign away the rights of previous works to which I retain the rights, nor the rights to work that I do outside the scope of the contract I am signing at that point. I spend a significant amount of time and energy creating copyrighted material and some of that material has to remain mine. Like any copyright bill would, bill C-32 provides a framework to fall back on when cases aren&#39;t covered by contract and now, it looks like it&#39;s on its way to be passed.</p>
 ]]></content></entry><entry><title type="html">Home Search, Where Art Thou?</title><link href="https://rlc.vlinder.ca/blog/2010/09/04/home-search-where-art-thou"></link><published>2010-09-04T00:00:00.000Z</published><updated>2010-09-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/09/04/home-search-where-art-thou</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/09/04/home-search-where-art-thou"><![CDATA[ <p>In my day to day life, there are few things I truly dislike doing: I&#39;m a pretty happy person. There is one thing, though, that I really don&#39;t like - at all - and that strikes me as a truly pointless exercise in futility: searching. Shouldn&#39;t we have a solution for that by now?</p>
<p>It strikes me we already have all of the necessary technology to come up with a viable solution: I&#39;ve worked with most of them! Let&#39;s have a look what this might look like.</p>
 ]]></content></entry><entry><title type="html">"Given the existence of A, B will create itself, therefore, C had nothing to do with it"</title><link href="https://rlc.vlinder.ca/blog/2010/09/04/given-the-existence-of-a-b-will-create-itself-therefore-c-had-nothing-to-do-with-it"></link><published>2010-09-04T00:00:00.000Z</published><updated>2010-09-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/09/04/given-the-existence-of-a-b-will-create-itself-therefore-c-had-nothing-to-do-with-it</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/09/04/given-the-existence-of-a-b-will-create-itself-therefore-c-had-nothing-to-do-with-it"><![CDATA[ <p>Stephen Hawking&#39;s new book promises a lot of hype. CNN Already published two separate articles about it on their site even though no-one has read it yet. I&#39;ve added it to my <a href="http://amzn.com/w/2NIU712R6L9YF">Amazon Science Books Wishlist</a>, and will buy it when I come round to it unless some generous soul wants to offer it to me first. About the hype, though:</p>
 ]]></content></entry><entry><title type="html">Opacity: Encapsulation at its best (and worst)</title><link href="https://rlc.vlinder.ca/blog/2010/09/01/opacity-encapsulation-at-its-best-and-worst"></link><published>2010-09-01T00:00:00.000Z</published><updated>2010-09-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/09/01/opacity-encapsulation-at-its-best-and-worst</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/09/01/opacity-encapsulation-at-its-best-and-worst"><![CDATA[ <p>One thing you may have noticed when looking at the code of our abstract factory, is that the base classes (interfaces) of each of our abstract objects don&#39;t have much to tell their users: there are hardly any accessors or mutators to be found. This is an attribute of encapsulation called <em>opacity</em> and in this installment, we&#39;ll explore its advantages and disadvantages.</p>
 ]]></content></entry><entry><title type="html">Women in computing</title><link href="https://rlc.vlinder.ca/blog/2010/08/13/women-in-computing"></link><published>2010-08-13T00:00:00.000Z</published><updated>2010-08-13T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/08/13/women-in-computing</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/08/13/women-in-computing"><![CDATA[ <p>When I ran a team of R&D; programmers, a while ago, at one point, we had one person from a visible minority, one person with a slight handicap, two women, two immigrants (one of which was one of the two women, the other was me) and at least one phytopathologist (me). We beat most of the statistics with that team, because there were about ten of us at the time. One of the members of my team remarked that it was the first time he&#39;d worked in a team with two women in it - and he had worked in larger teams before.</p>
 ]]></content></entry><entry><title type="html">Tell me twice</title><link href="https://rlc.vlinder.ca/blog/2010/08/06/tell-me-twice"></link><published>2010-08-06T00:00:00.000Z</published><updated>2010-08-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/08/06/tell-me-twice</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/08/06/tell-me-twice"><![CDATA[ <p>A few days ago, I explained to a colleague why certain communications protocols have a &quot;tell me twice&quot; policy - i.e. to allow for any command to have any effect, the same command - or a command to the same effect - has to be received twice (from the same master). In human parlance, this would be the equivalent of Jean-Luc Picard saying &quot;ensign, I&#39;m about to tell you to lower the shields&quot; ... &quot;ensign, shields down!&quot; in which the ensign (Wesley Crusher?) wouldn&#39;t be allowed to obey the second command unless he had heard, understood and acknowledged (HUA!) the first. Now for the math..</p>
 ]]></content></entry><entry><title type="html">Once burned, twice shy</title><link href="https://rlc.vlinder.ca/blog/2010/08/03/once-burned-twice-shy"></link><published>2010-08-03T00:00:00.000Z</published><updated>2010-08-03T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/08/03/once-burned-twice-shy</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/08/03/once-burned-twice-shy"><![CDATA[ <p>&quot;<a href="http://raptureinvenice.com/?p=63">Is Good Code Possible?</a>&quot; John Blanco asks on his blog. He goes on to tell a harrowing story on how he had to develop an iPhone app for a big retailer (&quot;Gorilla Mart&quot;) in less than two weeks. Why he even accepted the contract is beyond me but then, he may not have had a choice.</p>
<p>In the scenario he described, there&#39;s really little chance of creating quality code, unless...</p>
 ]]></content></entry><entry><title type="html">Socks 5: Credentials on Windows</title><link href="https://rlc.vlinder.ca/blog/2010/08/01/socks-5-credentials-on-windows"></link><published>2010-08-01T00:00:00.000Z</published><updated>2010-08-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/08/01/socks-5-credentials-on-windows</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/08/01/socks-5-credentials-on-windows"><![CDATA[ <p>In this installment, we will continue our implementation of GSSAPI/SSPI, this time on Windows, where we&#39;ll try to get some credentials.</p>
<p>We will look at two topics this time: first, we&#39;ll look at data encapsulation, after which we&#39;ll look at when RAII is a bit too much, and how to handle that.</p>
 ]]></content></entry><entry><title type="html">On the Importance of Coverage Profiling</title><link href="https://rlc.vlinder.ca/blog/2010/07/21/on-the-importance-of-coverage-profiling"></link><published>2010-07-21T00:00:00.000Z</published><updated>2010-07-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/07/21/on-the-importance-of-coverage-profiling</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/07/21/on-the-importance-of-coverage-profiling"><![CDATA[ <p>Coverage profiling allows you to see which parts of the code have been run and are especially useful when unit-testing. Here&#39;s an anecdote to show just how important they can be.</p>
 ]]></content></entry><entry><title type="html">Socks 5: Expanding the factory</title><link href="https://rlc.vlinder.ca/blog/2010/07/02/expanding-the-factory"></link><published>2010-07-02T00:00:00.000Z</published><updated>2010-07-02T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/07/02/expanding-the-factory</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/07/02/expanding-the-factory"><![CDATA[ <p>In this installment, we will expand the <code>MechanismFactory</code> class for SSPI. We will take a slightly closer look at the SSPI call than we would normally do, and we will also take a look at the Unicode/&quot;ANSI&quot; differences on Windows. Because of this, we will <em>not</em> have time to take a look at the GSS-API side of things, which we will therefore look into next time around.</p>
 ]]></content></entry><entry><title type="html">TPM on your content under #c32 - handing away your rights?</title><link href="https://rlc.vlinder.ca/blog/2010/06/27/tpm-on-your-content-under-c32-handing-away-your-rights"></link><published>2010-06-27T00:00:00.000Z</published><updated>2010-06-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/06/27/tpm-on-your-content-under-c32-handing-away-your-rights</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/06/27/tpm-on-your-content-under-c32-handing-away-your-rights"><![CDATA[ <p>Under bill C-32 it would be illegal to remove TPM under by far most circumstances. Does that mean that, if you decide to publish software you create with TPM, you&#39;re handing away the rights of your software to the TPM manufacturer? No, it doesn&#39;t.</p>
 ]]></content></entry><entry><title type="html">TPM and the Public Domain (#c32)</title><link href="https://rlc.vlinder.ca/blog/2010/06/26/tpm-and-the-public-domain-c32"></link><published>2010-06-26T00:00:00.000Z</published><updated>2010-06-26T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/06/26/tpm-and-the-public-domain-c32</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/06/26/tpm-and-the-public-domain-c32"><![CDATA[ <p>Accroding to <a href="http://web.archive.org/web/20100120083653/http://www.appropriationart.ca/">The Appropriation Art Coalition</a> applying TPM to public domain content effectively removes that content from the public domain. Is that really true? I don&#39;t think so, and here&#39;s why.</p>
 ]]></content></entry><entry><title type="html">Is TPM bad for Open Source? (#c32)</title><link href="https://rlc.vlinder.ca/blog/2010/06/25/is-tpm-bad-for-open-source-c32"></link><published>2010-06-25T00:00:00.000Z</published><updated>2010-06-25T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/06/25/is-tpm-bad-for-open-source-c32</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/06/25/is-tpm-bad-for-open-source-c32"><![CDATA[ <p>It&#39;s been argued that TPM and bill C-32 are bad for Free/Libre Open Source Software development. Is that true? If so, why? If not, why not? Personally, I don&#39;t think so, and I&#39;ll tell you why.</p>
 ]]></content></entry><entry><title type="html">Feedback on #C32: Constructive, Destructive or Pointless?</title><link href="https://rlc.vlinder.ca/blog/2010/06/24/feedback-on-c32-constructive-destructive-or-pointless"></link><published>2010-06-24T00:00:00.000Z</published><updated>2010-06-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/06/24/feedback-on-c32-constructive-destructive-or-pointless</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/06/24/feedback-on-c32-constructive-destructive-or-pointless"><![CDATA[ <p>While some of the feed-back on bill C-32 (Copyright reform) seems to be constructive, much of it has become a foray of personal attacks on Conservative MP and Minister of Canadian Heritage and Official Languages, James Moore, who tabled the legislation with Tony Clement, Minister of Industry, on June 2. Of course, his <a href="http://video.itworldcanada.com?bcpid=7044989001&bctid=101481423001">remarks</a> on the subject weren&#39;t very welcome either, calling opponents of the bill &quot;radical extremists&quot;. So, the debate is on on what should probably be one of the more boring subjects in Ottawa: copyright legislation.</p>
 ]]></content></entry><entry><title type="html">Bill C-32</title><link href="https://rlc.vlinder.ca/blog/2010/06/23/bill-c-32"></link><published>2010-06-23T00:00:00.000Z</published><updated>2010-06-23T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/06/23/bill-c-32</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/06/23/bill-c-32"><![CDATA[ <p>A few days ago, I was listening to the podcast for the CBC program <a href="http://www.cbc.ca/spark/2010/06/spark-116-june-6-8-2010/">Spark</a>, in which they mentioned a new bill, bill C-32. They had a person on the show, whose name I do not remember, who said it was a very &quot;balanced&quot; bill. That peaked my interest, so I decided to read the bill myself.</p>
 ]]></content></entry><entry><title type="html">Socks 5: Starting GSS-API - The Factory Pattern</title><link href="https://rlc.vlinder.ca/blog/2010/06/17/socks-5-starting-gss-api-the-factory-pattern"></link><published>2010-06-17T00:00:00.000Z</published><updated>2010-06-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/06/17/socks-5-starting-gss-api-the-factory-pattern</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/06/17/socks-5-starting-gss-api-the-factory-pattern"><![CDATA[ <p>In this installment, we&#39;ll be doing a final bit of clean-up and starting to implement a GSS-API/SSPI client program, while focusing on the <em>Abstract Factory Pattern</em></p>
 ]]></content></entry><entry><title type="html">undefined</title><link href="https://rlc.vlinder.ca/blog/2010/06/04/binary-search"></link><published>2010-06-04T00:00:00.000Z</published><updated>2010-06-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/06/04/binary-search</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/06/04/binary-search"><![CDATA[ <p>While going through some old code, for another article I&#39;m writing that will come up on the blog, I came across an implementation of binary search in C. While the implementation itself was certainly OK, it wasn&#39;t exactly a general-purpose implementation, so I thought I&#39;d write one and put it on the C++ for the self-taught side of my blog. While I was at it, I also analyzed</p>
 ]]></content></entry><entry><title type="html">Lock-Poor Stack</title><link href="https://rlc.vlinder.ca/blog/2010/06/01/lock-poor-stack"></link><published>2010-06-01T00:00:00.000Z</published><updated>2010-06-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/06/01/lock-poor-stack</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/06/01/lock-poor-stack"><![CDATA[ <p>The following is the complete code of a lock-poor stack in C/C++: it&#39;s mostly C but it uses Relacy for testing, so the atomics are implemented in C++. With a little work, you can turn this into a complete C implementation without depending on relacy. I wrote in while writing an article that will soon appear on this blog.</p>
<p>The stack is not completely lock-free because it needs a lock to make sure it doesn&#39;t need any memory management solution for its reference to the top node during popping or reading the top node.</p>
 ]]></content></entry><entry><title type="html">Quantum teleportation achieved over 16 km</title><link href="https://rlc.vlinder.ca/blog/2010/05/26/quantum-teleportation-achieved-over-16-km"></link><published>2010-05-26T00:00:00.000Z</published><updated>2010-05-26T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/05/26/quantum-teleportation-achieved-over-16-km</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/05/26/quantum-teleportation-achieved-over-16-km"><![CDATA[ <p>Recently, in <a href="http://www.physorg.com/news193551675.html">this report</a>, it&#39;s been reported that a physics laboratory in China achieved a new distance record in quantum teleportation: 16 km. That&#39;s quite a feat, considering that up until now, the max. distance had been a few hundred meters.</p>
 ]]></content></entry><entry><title type="html">Albion College decides to scrap Computer Science and Journalism majors</title><link href="https://rlc.vlinder.ca/blog/2010/05/24/albion-college-decides-to-scrap-computer-science-and-journalism-majors"></link><published>2010-05-24T00:00:00.000Z</published><updated>2010-05-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/05/24/albion-college-decides-to-scrap-computer-science-and-journalism-majors</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/05/24/albion-college-decides-to-scrap-computer-science-and-journalism-majors"><![CDATA[ <p>I came across this article while surfing the web this afternoon</p>
 ]]></content></entry><entry><title type="html">Creation of a Bacterial Cell Controlled by a Chemically Synthesized Genome</title><link href="https://rlc.vlinder.ca/blog/2010/05/22/creation-of-a-bacterial-cell-controlled-by-a-chemically-synthesized-genome"></link><published>2010-05-22T00:00:00.000Z</published><updated>2010-05-22T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/05/22/creation-of-a-bacterial-cell-controlled-by-a-chemically-synthesized-genome</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/05/22/creation-of-a-bacterial-cell-controlled-by-a-chemically-synthesized-genome"><![CDATA[ <p>D.G. Gibson <em>et al.</em> <a href="http://www.sciencemag.org/cgi/content/abstract/science.1190719">reported</a>, in Science Magazine, the &quot;Creation of a Bacterial Cell Controlled by a Chemically Synthesized Genome&quot;. Now, I used to be a biologist and have studied this particular type of biology for a number of years before leaving the field, mostly for financial reasons, for a career in computer science. I&#39;m also a certifiable geek, as I think most of the readers of this blog are, so I thought I&#39;d explain what this means, in geek terms.</p>
 ]]></content></entry><entry><title type="html">Socks 5: Finishing sending a token</title><link href="https://rlc.vlinder.ca/blog/2010/05/16/socks-5-finishing-sending-a-token"></link><published>2010-05-16T00:00:00.000Z</published><updated>2010-05-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/05/16/socks-5-finishing-sending-a-token</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/05/16/socks-5-finishing-sending-a-token"><![CDATA[ <p>In this installment, we will finish the implementation for sending a token from the client to the server. We will answer the remaining open questions and, in doing so, improve the code a bit more. When we&#39;re done, we will have a client that sends a token to the server, and a server that reads the token and parses its envelope - which is a pretty good foundation to build on. We will later make that foundation a bit more solid by removing the classes involved from the test code and moving them to their final locations. First, however, let&#39;s take a look at those questions and the answers.</p>
 ]]></content></entry><entry><title type="html">Software development productivity</title><link href="https://rlc.vlinder.ca/blog/2010/05/07/software-development-productivity"></link><published>2010-05-07T00:00:00.000Z</published><updated>2010-05-07T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/05/07/software-development-productivity</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/05/07/software-development-productivity"><![CDATA[ <p>In the latest installment of my podcast, I asserted that &quot;all software productivity problems are project management problems&quot;. In this post, I will explain why I believe that to be the case and how I think those problems can be resolved.</p>
 ]]></content></entry><entry><title type="html">Speaking different languages</title><link href="https://rlc.vlinder.ca/blog/2010/05/04/speaking-different-languages"></link><published>2010-05-04T00:00:00.000Z</published><updated>2010-05-04T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/05/04/speaking-different-languages</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/05/04/speaking-different-languages"><![CDATA[ <p>As a dutchman living in Quebec, Canada - one of those parts of the world where francophones (french-speaking people) are surrounded by anglophones (english-speaking people) and yet thrive speaking french almost exclusively - I sometimes run into the &quot;corner cases&quot; of language related coding standards - e.g. the language comments are supposed to be written in.</p>
 ]]></content></entry><entry><title type="html">Socks 5: Continuing Sending a Token - Anecdote</title><link href="https://rlc.vlinder.ca/blog/2010/05/01/socks-5-continuing-sending-a-token-anecdote"></link><published>2010-05-01T00:00:00.000Z</published><updated>2010-05-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/05/01/socks-5-continuing-sending-a-token-anecdote</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/05/01/socks-5-continuing-sending-a-token-anecdote"><![CDATA[ <p>Recording the latest episode of the podcast reminded me of a story that I&#39;d like to tell you: a few years ago, I started working as a programmer on a project in which there was a policy to include the definitions of the classes used in a header - by including the headers that defined those classes - rather than what I recommended in the podcast: to use forward declarations. They also had a policy to use only the name of the file to include rather than the complete path (e.g. <code>#include &quot;MyClass.h&quot;</code> rather than <code>#include &quot;path/to/MyClass.h&quot;</code>). The reason for this was convenience: the preprocessor, when told where to look, would find the proper files and including them in the class&#39; header meant you didn&#39;t have to use dynamic allocation (of which there was still a lot going on in the project) but you could use the objects directly, rather than references and pointers.</p>
 ]]></content></entry><entry><title type="html">Did I say 5000? Make that 14000(!)</title><link href="https://rlc.vlinder.ca/blog/2010/04/20/did-i-say-5000-make-that-14000"></link><published>2010-04-20T00:00:00.000Z</published><updated>2010-04-20T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/04/20/did-i-say-5000-make-that-14000</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/04/20/did-i-say-5000-make-that-14000"><![CDATA[  ]]></content></entry><entry><title type="html">SOCKS 5 Step 2: exchanging a token</title><link href="https://rlc.vlinder.ca/blog/2010/04/16/socks-5-step-2-exchanging-a-token"></link><published>2010-04-16T00:00:00.000Z</published><updated>2010-04-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/04/16/socks-5-step-2-exchanging-a-token</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/04/16/socks-5-step-2-exchanging-a-token"><![CDATA[ <p>With a few minor adjustments to the existing <code>Token</code> class, we can finish the first part of our implementation of RFC 1961 for now - we will hook it into an implementation of the GSS API later.</p>
 ]]></content></entry><entry><title type="html">Thanks for listening - 5000+ downloads</title><link href="https://rlc.vlinder.ca/blog/2010/03/27/thanks-for-listening-5000-downloads"></link><published>2010-03-27T00:00:00.000Z</published><updated>2010-03-27T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/03/27/thanks-for-listening-5000-downloads</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/03/27/thanks-for-listening-5000-downloads"><![CDATA[  ]]></content></entry><entry><title type="html">Preprequisites for the project</title><link href="https://rlc.vlinder.ca/blog/2010/03/16/preprequisites-for-the-project"></link><published>2010-03-16T00:00:00.000Z</published><updated>2010-03-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/03/16/preprequisites-for-the-project</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/03/16/preprequisites-for-the-project"><![CDATA[ <p>In this installment, we&#39;ll get you set up to compile everything that needs compiling in our project. We&#39;ll try to keep it short and sweet and you&#39;ll be able to download most of what you need just by following the links on this page.</p>
 ]]></content></entry><entry><title type="html">Use-Cases Part 3: What A Use-Case Really Is & Writing Use-Cases</title><link href="https://rlc.vlinder.ca/blog/2010/03/01/use-cases-part-3-what-a-use-case-really-is"></link><published>2010-03-01T00:00:00.000Z</published><updated>2010-03-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/03/01/use-cases-part-3-what-a-use-case-really-is</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/03/01/use-cases-part-3-what-a-use-case-really-is"><![CDATA[ <p>Before we start using use-cases in the description of the functional requirements we want to meet in our project, we need to understand what a use-case really is and how to go about writing one. In this installment I will attempt to answer both those questions. However, this series is called &quot;C++ for the self-taught&quot; for a reason: I will include references for all of the material I have cited in this installment, and I hope you will take it upon yourself to go out and look a bit yourself as well.</p>
 ]]></content></entry><entry><title type="html">Use-Cases Part 2: What Use-Cases Are For (The history, present and future of use-cases)</title><link href="https://rlc.vlinder.ca/blog/2010/02/16/use-cases-part-2-what-use-cases-are-for-the-history-present-and-future-of-use-cases"></link><published>2010-02-16T00:00:00.000Z</published><updated>2010-02-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/02/16/use-cases-part-2-what-use-cases-are-for-the-history-present-and-future-of-use-cases</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/02/16/use-cases-part-2-what-use-cases-are-for-the-history-present-and-future-of-use-cases"><![CDATA[ <p>In the late 1980s and early 1990s, the &quot;waterfall&quot; software development model, which had been around (with that name) since the 1970s (see, for example, Boehm, B.W. Software engineering. IEEE 7~ans Comput. C-25, (1976), 1226-1241) was starting to be progressively &quot;refined&quot;. When that happens, it usually means that there are problems with the model that need to be addressed - or the model will crumble and fall. Object-oriented programming was becoming more or less main-stream and early versions of C++ were cropping up. &quot;Good practice&quot; documents for programming on non-OO languages started to stress the use of OO-like APIs and soon enough, object-oriented programming would no longer be a mere buzzword.</p>
 ]]></content></entry><entry><title type="html">The answer to the quiz in episode 7 of C++ for the self-taught</title><link href="https://rlc.vlinder.ca/blog/2010/02/05/the-answer-to-the-quiz-in-episode-7-of-c-for-the-self-taught"></link><published>2010-02-05T00:00:00.000Z</published><updated>2010-02-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/02/05/the-answer-to-the-quiz-in-episode-7-of-c-for-the-self-taught</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/02/05/the-answer-to-the-quiz-in-episode-7-of-c-for-the-self-taught"><![CDATA[ <p>I know you must have been aching for the response to the quiz from three weeks ago. If you haven&#39;t thought of your own answer yet, go back to the code and have another look. Try running it through a compiler with all the warnings turned on - it might tell you what the bug is (more or less), but probably not how to solve it.</p>
 ]]></content></entry><entry><title type="html">Use-Cases Part 1: Introduction & Ingredients</title><link href="https://rlc.vlinder.ca/blog/2010/02/01/use-cases-part-1-introduction-ingredients"></link><published>2010-02-01T00:00:00.000Z</published><updated>2010-02-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/02/01/use-cases-part-1-introduction-ingredients</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/02/01/use-cases-part-1-introduction-ingredients"><![CDATA[ <p>In the &quot;C++ for the self-taught&quot; series, we&#39;re about to embark on a new project. In order to describe that project and in order to figure out what we want the result of that project will be, we will be using a tool called the use-case. So, I think an intermezzo on use-cases is in order.</p>
 ]]></content></entry><entry><title type="html">Confusing the compiler</title><link href="https://rlc.vlinder.ca/blog/2010/01/19/confusing-the-compiler"></link><published>2010-01-19T00:00:00.000Z</published><updated>2010-01-19T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/01/19/confusing-the-compiler</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/01/19/confusing-the-compiler"><![CDATA[ <p>Sometimes it&#39;s real fun to see how easily you can confuse the compiler. In the error below, <code>function</code> is a macro that takes three parameters:</p>
<pre><code>filename.c(453) : error C2220: warning treated as error - no &#39;object&#39; file generated
filename.c(453) : warning C4013: &#39;function&#39; undefined; assuming extern returning int
filename.c(466) : error C2064: term does not evaluate to a function taking 279509856 arguments
</code></pre>
<p>I don&#39;t know where it got the idea that I typed <strong>279,509,856</strong> parameters, but I sure didn&#39;t take the time to do that! ;)</p>
 ]]></content></entry><entry><title type="html">Error handling in C</title><link href="https://rlc.vlinder.ca/blog/2010/01/16/error-handling-in-c"></link><published>2010-01-16T00:00:00.000Z</published><updated>2010-01-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/01/16/error-handling-in-c</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/01/16/error-handling-in-c"><![CDATA[ <p>One of the things I do as a analyst-programmer is write software - that would be the &quot;programmer&quot; part. I usually do that in C++ but, sometimes, when the facilities of C++ aren&#39;t available (e.g. no exception handling and no RTTI) C becomes a more obvious choice. When that happens, RTTI is not the thing I miss the most - you can get around that using magic numbers if you need to. Exceptions, on the other hand, become a very painful absence when you&#39;re used to using them.</p>
 ]]></content></entry><entry><title type="html">7- Polymorphism</title><link href="https://rlc.vlinder.ca/blog/2010/01/16/7-polymorphism"></link><published>2010-01-16T00:00:00.000Z</published><updated>2010-01-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/01/16/7-polymorphism</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/01/16/7-polymorphism"><![CDATA[ <p>In this last installment before we start our development project (and yes, there is a development project coming) we will talk a bit about the C++ type system, how to use it, how it ties in with object-oriented programming and how it ties in with what we&#39;ve discussed earlier. We will see what the <code>virtual</code> keyword is all about, and how &quot;a duck is a bird, is an animal&quot; and &quot;a table and a chair are both pieces of furniture&quot; comes into play, and is expressed in C++. Once we&#39;ve gone through that, you&#39;ll be sufficiently equipped for object-oriented programming in C++.</p>
 ]]></content></entry><entry><title type="html">Distributed Software Development Part 3: Tools Of The Trade</title><link href="https://rlc.vlinder.ca/blog/2010/01/08/distributed-software-development-part-3-tools-of-the-trade"></link><published>2010-01-08T00:00:00.000Z</published><updated>2010-01-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/01/08/distributed-software-development-part-3-tools-of-the-trade</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/01/08/distributed-software-development-part-3-tools-of-the-trade"><![CDATA[ <p>For software development, there are a few things we need on a daily basis: our source code, our documentation, our integrated development environment (IDE) and our hardware. Without any one of these, a software developer is as useless as... well... something very useless.</p>
 ]]></content></entry><entry><title type="html">6- Resource Allocation and RAII</title><link href="https://rlc.vlinder.ca/blog/2010/01/01/3-resource-allocation-and-raii"></link><published>2010-01-01T00:00:00.000Z</published><updated>2010-01-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2010/01/01/3-resource-allocation-and-raii</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2010/01/01/3-resource-allocation-and-raii"><![CDATA[ <p>In standard C++, there is no garbage collector: there is no built-in mechanism that will magically clean up after you if you make a mess. You do, however, have the possibility to allocate resources, such as memory or files, and work with them. You should, therefore, be able to manage them consistently so you don&#39;t &quot;leak&quot; them.</p>
 ]]></content></entry><entry><title type="html">Distributed Software Development Part 1: The Safe Boom</title><link href="https://rlc.vlinder.ca/blog/2009/12/24/distributed-software-development-the-safe-boom"></link><published>2009-12-24T00:00:00.000Z</published><updated>2009-12-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/12/24/distributed-software-development-the-safe-boom</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/12/24/distributed-software-development-the-safe-boom"><![CDATA[ <p>As I said in <a href="/blog/2009/12/staring-into-the-depths-of-the-yet-unwritten">a previous post</a>, the new economic realities that come with peak oil and climate change will change the way we work and the way the computing industry is run. One of those changes will be limiting unnecessary costs related to moving people around - something we already do for goods.</p>
 ]]></content></entry><entry><title type="html">Distributed Software Development Part 2: Management Challenges</title><link href="https://rlc.vlinder.ca/blog/2009/12/24/distributed-software-development-part-2"></link><published>2009-12-24T00:00:00.000Z</published><updated>2009-12-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/12/24/distributed-software-development-part-2</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/12/24/distributed-software-development-part-2"><![CDATA[ <p>Business is largely about management which, in turn, is largely about reducing costs and reducing time-to-market. However, today&#39;s management models for human resources are largely based on two things: physical presence in the office and seniority. Performance is often only part of the equation when it comes to promotion - people tend to get promoted upto their level of incompetence - and bonuses. In the software industry, however, management models are changing towards a more participatory model in which managers have less and less to say on the &quot;how&quot;, the &quot;who&quot; and the &quot;when&quot; of the development process but, in return, get more say in the &quot;what&quot; - the customer gets to say &quot;why&quot;. In some forms of agile development, team members can even be &quot;voted off the island&quot;, which can be very disconcerting indeed for the manager.</p>
 ]]></content></entry><entry><title type="html">5- Objects, References and Pointers</title><link href="https://rlc.vlinder.ca/blog/2009/12/16/3-objects-references-and-pointers"></link><published>2009-12-16T00:00:00.000Z</published><updated>2009-12-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/12/16/3-objects-references-and-pointers</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/12/16/3-objects-references-and-pointers"><![CDATA[ <p>The difference between references and pointers, what they are w.r.t. pointers and how to handle each has often been the source of confusion, sometimes even for seasoned programmers and often for formally trained, inexperienced programmers. Very often, especially in legacy code, I find one if the ugliest constructs imaginable: a function that returns a reference that is the result of dereferencing a pointer, if which the address is subsequently taken to validate its value. Ugh!</p>
 ]]></content></entry><entry><title type="html">Staring into the depths of the yet unwritten</title><link href="https://rlc.vlinder.ca/blog/2009/12/06/staring-into-the-depths-of-the-yet-unwritten"></link><published>2009-12-06T00:00:00.000Z</published><updated>2009-12-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/12/06/staring-into-the-depths-of-the-yet-unwritten</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/12/06/staring-into-the-depths-of-the-yet-unwritten"><![CDATA[ <p>By the end of the next decade, there will be no oil left for consumers such as myself and we&#39;ll have reached peak oil.
By the end of the decade after that, the last wild polar bear will have drowned because there will be <a href="https://web.archive.org/web/20091202152216/http://arctic.atmos.uiuc.edu/cryosphere/">no polar ice left for it to walk on</a>, it will have been shot by some-one up North as it entered a home looking for food, or it will have died of starvation after eating the last of its cubs.
By the end of my expected natural life-span, there will be no edible fish left in the ocean.</p>
<p>These statements, which are corroborated by leading economist and, for the one about the polar ice cap, meteorologists rather than environmentalists, have a profound impact on the way we work and on the computing industry in general.</p>
 ]]></content></entry><entry><title type="html">4- Classes</title><link href="https://rlc.vlinder.ca/blog/2009/12/01/4-classes"></link><published>2009-12-01T00:00:00.000Z</published><updated>2009-12-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/12/01/4-classes</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/12/01/4-classes"><![CDATA[ <p>In any language that supports object-oriented programming, the class is a, if not the, basic building block. In this post, we&#39;ll take a closer look at what a class is, and how that ties in with what we&#39;ve seen in the previous post, data structures, and in the two next posts: pointers, references, objects and RAII.</p>
 ]]></content></entry><entry><title type="html">Microsoft Team Foundation Server vs Git</title><link href="https://rlc.vlinder.ca/blog/2009/11/21/microsoft-team-foundation-server-vs-git"></link><published>2009-11-21T00:00:00.000Z</published><updated>2009-11-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/11/21/microsoft-team-foundation-server-vs-git</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/11/21/microsoft-team-foundation-server-vs-git"><![CDATA[ <p>For the last few weeks, and in the coming months, I&#39;ve had to (and will have to) work with Microsoft&#39;s Team Foundation Server (TFS).</p>
 ]]></content></entry><entry><title type="html">Implicit, Contextual Requirements</title><link href="https://rlc.vlinder.ca/blog/2009/11/17/implicit-contextual-requirements"></link><published>2009-11-17T00:00:00.000Z</published><updated>2009-11-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/11/17/implicit-contextual-requirements</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/11/17/implicit-contextual-requirements"><![CDATA[ <p>We tend to forget what we know implicitly: if we&#39;ve been working in the same domain for long enough, we tend to forget that not everybody knows the same things and has the same experience we do. For example, some-one who has been working in distribution for a long time may think it&#39;s obvious that, even if you do switch to RFID, you will still need line-of-sight machine-readable codes (because RFID might fail and because the technology for using line-of-sight machine-readable codes is much mire ubiquitous than RFID is) and when they think of line-of-sight machine-readable codes, they think of barcodes and, depending on what and where they distribute, they might think of Data Matrix codes, UPC-12 codes, or any number of other barcodes.</p>
 ]]></content></entry><entry><title type="html">A Day In The Life Of A C++ Analyst/Programmer</title><link href="https://rlc.vlinder.ca/blog/2009/11/17/a-day-in-the-life-of-a-c-analystprogrammer"></link><published>2009-11-17T00:00:00.000Z</published><updated>2009-11-17T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/11/17/a-day-in-the-life-of-a-c-analystprogrammer</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/11/17/a-day-in-the-life-of-a-c-analystprogrammer"><![CDATA[ <p>While listening to Spark, on CBC Radio, I had the idea it might be nice for non-developers (and aspiring developers) to know what a typical day might look like.</p>
 ]]></content></entry><entry><title type="html">3- Data Structures</title><link href="https://rlc.vlinder.ca/blog/2009/11/16/x-data-structures"></link><published>2009-11-16T00:00:00.000Z</published><updated>2009-11-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/11/16/x-data-structures</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/11/16/x-data-structures"><![CDATA[ <p>Before we delve into the realm of object-oriented programming (which we will get into in the next post), there is a notion that is so basic, and so important to any type of programming, that we have to treat it in order to make the whole notion of object-oriented-programming comprehensible.</p>
 ]]></content></entry><entry><title type="html">The Quest For Bug-Free Software</title><link href="https://rlc.vlinder.ca/blog/2009/11/11/the-quest-for-bug-free-software"></link><published>2009-11-11T00:00:00.000Z</published><updated>2009-11-11T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/11/11/the-quest-for-bug-free-software</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/11/11/the-quest-for-bug-free-software"><![CDATA[ <p>In recent literature from the scientific side of software engineering, there&#39;ve been a lot of publications on producing and maintaining high-quality software. A lot of focus is being put on tools, systems, procedures and processes that aim to reduce the price-tag of quality and avoid the price-tag of failure.</p>
 ]]></content></entry><entry><title type="html">2-Control Structures</title><link href="https://rlc.vlinder.ca/blog/2009/11/01/2-control-structures"></link><published>2009-11-01T00:00:00.000Z</published><updated>2009-11-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/11/01/2-control-structures</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/11/01/2-control-structures"><![CDATA[ <p>In this post, we&#39;ll take a look at a few <em>control structures</em> in C++. There are only a few of them, so we&#39;ll start by listing them all and giving you some examples of each, but we&#39;ll first take a look at what we mean by control structures.</p>
 ]]></content></entry><entry><title type="html">Protect what's yours</title><link href="https://rlc.vlinder.ca/blog/2009/10/26/protect-whats-yours"></link><published>2009-10-26T00:00:00.000Z</published><updated>2009-10-26T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/10/26/protect-whats-yours</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/10/26/protect-whats-yours"><![CDATA[ <p>I&#39;ve drawn up a list of my intellectual property yesterday. It&#39;s about four pages long and contains libraries, applications, web apps, training material, etc. Only one thing that I&#39;ve ever created and published is in the public domain - the rest has copyrights attached to it. That doesn&#39;t necessarily mean that you can&#39;t use it, or even that you have to pay me to be allowed to use it: it just means that it&#39;s mine and that I decide what kind of rights you have over it.</p>
 ]]></content></entry><entry><title type="html">Badly defined semantics</title><link href="https://rlc.vlinder.ca/blog/2009/10/26/badly-defined-semantics"></link><published>2009-10-26T00:00:00.000Z</published><updated>2009-10-26T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/10/26/badly-defined-semantics</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/10/26/badly-defined-semantics"><![CDATA[ <p>There is probably nothing worse than badly defined semantics: functions that might (or might not) take ownership of the object you pass to them can be a serious maintenance headache.</p>
 ]]></content></entry><entry><title type="html">Rapid application development in PHP</title><link href="https://rlc.vlinder.ca/blog/2009/10/14/rapid-application-development-in-php"></link><published>2009-10-14T00:00:00.000Z</published><updated>2009-10-14T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/10/14/rapid-application-development-in-php</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/10/14/rapid-application-development-in-php"><![CDATA[ <p>For the last few days, I&#39;ve been out of my usual C++ cocoon and working, in stead, on a web app to help me better organize my projects and - more especially - help me better track them.</p>
 ]]></content></entry><entry><title type="html">C++ for the self-taught: Introduction</title><link href="https://rlc.vlinder.ca/blog/2009/10/14/c-for-the-self-taught-introduction"></link><published>2009-10-14T00:00:00.000Z</published><updated>2009-10-14T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/10/14/c-for-the-self-taught-introduction</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/10/14/c-for-the-self-taught-introduction"><![CDATA[ <p>I&#39;ve decided to take a little time to make use of those 20000+ hours of C++ I have under my belt and make life a bit easier on those of you that are learning C++. In order to do that, I have created a new category called &quot;C++ for the self-taught&quot; that will basically show you how to program in C++.</p>
 ]]></content></entry><entry><title type="html">1- "Hello, world!"</title><link href="https://rlc.vlinder.ca/blog/2009/10/14/1-hello-world"></link><published>2009-10-14T00:00:00.000Z</published><updated>2009-10-14T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/10/14/1-hello-world</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/10/14/1-hello-world"><![CDATA[ <p>This is the first post in the &quot;C++ for the self-taught&quot; series - the second if you count the introduction. We will take a look at how to create your first C++ application.</p>
 ]]></content></entry><entry><title type="html">The importance of meaningful work</title><link href="https://rlc.vlinder.ca/blog/2009/10/01/the-importance-of-meaningful-work"></link><published>2009-10-01T00:00:00.000Z</published><updated>2009-10-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/10/01/the-importance-of-meaningful-work</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/10/01/the-importance-of-meaningful-work"><![CDATA[  ]]></content></entry><entry><title type="html">Developer's Guidelines & High-Quality Software</title><link href="https://rlc.vlinder.ca/blog/2009/09/30/developers-guidelines-high-quality-software"></link><published>2009-09-30T00:00:00.000Z</published><updated>2009-09-30T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/30/developers-guidelines-high-quality-software</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/30/developers-guidelines-high-quality-software"><![CDATA[ <p>Yesterday, I was asked what I saw as the most important factors to ensure the development of quality software. What I cited was good design, good implementation following good standards, and good testing.</p>
 ]]></content></entry><entry><title type="html">Security at the Design Phase - Examples & Review</title><link href="https://rlc.vlinder.ca/blog/2009/09/29/security-at-the-design-phase-examples-review"></link><published>2009-09-29T00:00:00.000Z</published><updated>2009-09-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/29/security-at-the-design-phase-examples-review</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/29/security-at-the-design-phase-examples-review"><![CDATA[ <p>A <a href="http://www.sei.cmu.edu/library/abstracts/reports/09tr010.cfm">recent report from the SEI</a> confirms once more what I have been saying for a few years now: security is a design-time concern as much as it is a concern at any other time during the application life-cycle. The very architecture of the application should take security into account from the outset, and that concern should be followed through down to implementation and deployment.</p>
 ]]></content></entry><entry><title type="html">Can Agile and CMMI Come Together?</title><link href="https://rlc.vlinder.ca/blog/2009/09/29/can-agile-and-cmmi-come-together"></link><published>2009-09-29T00:00:00.000Z</published><updated>2009-09-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/29/can-agile-and-cmmi-come-together</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/29/can-agile-and-cmmi-come-together"><![CDATA[ <p>I just finished reading a <a href="http://www.sei.cmu.edu/library/abstracts/reports/08tn003.cfm">report</a> by the <a href="http://www.sei.cmu.edu/">Software Engineering Institute</a> that accomplishes something that earlier literature, including &quot;<a href="http://www.ddj.com/cpp/201202684">SCRUM Meets CMMi - Agility and discipline combined</a>&quot; didn&#39;t accomplish: it takes a rational step back from both methods, shows where they&#39;re from and why they&#39;re different, how much of that difference is real and where the perceived differences come from, and how the two can come together. So, the short answer to my title is &quot;yes&quot;.</p>
 ]]></content></entry><entry><title type="html">Installing Git on CentOS 5.2</title><link href="https://rlc.vlinder.ca/blog/2009/09/25/installing-git-on-centos-5-2"></link><published>2009-09-25T00:00:00.000Z</published><updated>2009-09-25T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/25/installing-git-on-centos-5-2</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/25/installing-git-on-centos-5-2"><![CDATA[ <p>I&#39;m pretty sure that I&#39;m not the first one to run into this, so I thought I&#39;d blog how this works.</p>
 ]]></content></entry><entry><title type="html">Out-of-touch techies, marketing retoric, and nonsense. You do the math.</title><link href="https://rlc.vlinder.ca/blog/2009/09/24/out-of-touch-techies-marketing-retoric-and-nonsense-you-do-the-math"></link><published>2009-09-24T00:00:00.000Z</published><updated>2009-09-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/24/out-of-touch-techies-marketing-retoric-and-nonsense-you-do-the-math</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/24/out-of-touch-techies-marketing-retoric-and-nonsense-you-do-the-math"><![CDATA[ <p>Sometimes, techies and marketers - and especially people who are both - can get very out-of-touch with the real world and start spewing out nonsense</p>
 ]]></content></entry><entry><title type="html">A new theme</title><link href="https://rlc.vlinder.ca/blog/2009/09/23/a-new-theme"></link><published>2009-09-23T00:00:00.000Z</published><updated>2009-09-23T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/23/a-new-theme</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/23/a-new-theme"><![CDATA[ <p>I promised I wouldn&#39;t talk about this blog too much on the blog, and I promise I won&#39;t do this often, but I thought it might be a good idea to notice that I&#39;ve made a few minor changes.</p>
 ]]></content></entry><entry><title type="html">Running a LAMP: Debian vs. CentOS</title><link href="https://rlc.vlinder.ca/blog/2009/09/22/running-a-lamp-debian-vs-centos"></link><published>2009-09-22T00:00:00.000Z</published><updated>2009-09-22T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/22/running-a-lamp-debian-vs-centos</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/22/running-a-lamp-debian-vs-centos"><![CDATA[ <p>One of my clients uses CentOS for the production platform of their (web) application (written in PHP). They&#39;ve asked me to take over the development and maintenance of their web application, so, naturally, I set up a new server with CentOS 5.2, rather than the Debian installation I would normally use.</p>
 ]]></content></entry><entry><title type="html">The Importance of Proof-Of-Concepts</title><link href="https://rlc.vlinder.ca/blog/2009/09/19/the-importance-of-proof-of-concepts"></link><published>2009-09-19T00:00:00.000Z</published><updated>2009-09-19T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/19/the-importance-of-proof-of-concepts</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/19/the-importance-of-proof-of-concepts"><![CDATA[ <p>Any problem is an invitation to find a solution.</p>
 ]]></content></entry><entry><title type="html">Having fun on a technical test</title><link href="https://rlc.vlinder.ca/blog/2009/09/19/having-fun-on-a-technical-test"></link><published>2009-09-19T00:00:00.000Z</published><updated>2009-09-19T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/19/having-fun-on-a-technical-test</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/19/having-fun-on-a-technical-test"><![CDATA[ <p>I guess it&#39;s not a secret: I&#39;m looking for a job, either short-term or long-term, so I put my CV on a few websites. I got called by head-hunters twice this week: once for a contract to start on Monday (I&#39;m busy until the end of September/the beginning of October so I told &#39;em I couldn&#39;t start full-time until then) and one to start a bit later.</p>
 ]]></content></entry><entry><title type="html">Refreshing SQL</title><link href="https://rlc.vlinder.ca/blog/2009/09/10/refreshing-sql"></link><published>2009-09-10T00:00:00.000Z</published><updated>2009-09-10T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/10/refreshing-sql</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/10/refreshing-sql"><![CDATA[ <p>I first started working with SQL several years ago: MySQL was still in the 3.x versions, so I didnt use any stored procs, transactions, etc. Most of the business logic around the data was written in Perl. Though it was a fun time in many respects, I dont miss the limitations of MySQL one bit.</p>
 ]]></content></entry><entry><title type="html">Binary Compatibility</title><link href="https://rlc.vlinder.ca/blog/2009/09/01/binary-compatibility"></link><published>2009-09-01T00:00:00.000Z</published><updated>2009-09-01T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/09/01/binary-compatibility</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/09/01/binary-compatibility"><![CDATA[ <p>When writing library code, one of the snares to watch out for is <em>binary compatibility</em>. I have already <a href="/blog/2009/08/the-danger-of-breaking-changes/">talked about the dangers</a> of breaking binary - and API - compatibility but I had neither defined what binary compatibility is, now how to prevent breaking it. In this post, I will do both - and I will explain how, at Vlinder Software, we go about managing incompatible changes.</p>
 ]]></content></entry><entry><title type="html">The Danger of Breaking Changes</title><link href="https://rlc.vlinder.ca/blog/2009/08/24/the-danger-of-breaking-changes"></link><published>2009-08-24T00:00:00.000Z</published><updated>2009-08-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/24/the-danger-of-breaking-changes</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/24/the-danger-of-breaking-changes"><![CDATA[ <p><a href="http://xerces.apache.org/xerces-c/">Xerces-C</a> is without a doubt one of the most popular DOM implementations in C++ (and its Java sibling undoubtedly the most popular implementation for Java). As with any project that lives under the banner of the <a href="http://apache.org/">Apache Foundation</a> the project is managed using a meritocracy-style project management scheme and has been, quite successfully, for the last decade.</p>
 ]]></content></entry><entry><title type="html">The Importance of Patterns</title><link href="https://rlc.vlinder.ca/blog/2009/08/22/the-importance-of-patterns"></link><published>2009-08-22T00:00:00.000Z</published><updated>2009-08-22T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/22/the-importance-of-patterns</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/22/the-importance-of-patterns"><![CDATA[ <p>When explaining the design of some application to some-one, I find the use of analogies is one of the best tools available to me - better than diagrams and much better than technical terms: when using technical terms, the listener often starts &quot;glazing over&quot; after only a few seconds - maybe a minute. It really serves no other purpose than showing off how smart you are - and that is usually a pretty stupid (and therefore self-defeating) thing to do.</p>
 ]]></content></entry><entry><title type="html">Using Four-Letter Words In Code</title><link href="https://rlc.vlinder.ca/blog/2009/08/18/using-four-letter-words-in-code"></link><published>2009-08-18T00:00:00.000Z</published><updated>2009-08-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/18/using-four-letter-words-in-code</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/18/using-four-letter-words-in-code"><![CDATA[ <p>When writing firmware and device drivers, it is useful, sometimes, to have human-readable integer values - i.e. integer values that, when you read them in a debugger, mean something distinctive.</p>
 ]]></content></entry><entry><title type="html">Naming conventions and name mangling</title><link href="https://rlc.vlinder.ca/blog/2009/08/18/naming-conventions-and-name-mangling"></link><published>2009-08-18T00:00:00.000Z</published><updated>2009-08-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/18/naming-conventions-and-name-mangling</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/18/naming-conventions-and-name-mangling"><![CDATA[ <p>In C++, any name that starts with and underscore followed by an uppercase letter and any name that contains two consecutive underscores is reserved for any use [lib.global.names] and any name that begins with an underscore is reserved in the global namespace.</p>
 ]]></content></entry><entry><title type="html">Mail down - and back up again</title><link href="https://rlc.vlinder.ca/blog/2009/08/15/mail-down-and-back-up-again"></link><published>2009-08-15T00:00:00.000Z</published><updated>2009-08-15T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/15/mail-down-and-back-up-again</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/15/mail-down-and-back-up-again"><![CDATA[ <p>I changed my hosting provider a few days ago, which implied changing the DNS provider as well. As a result of this - and my forgetting to set the MX entry correctly, the mail service for landheer-cieslak.com was down. <a href="http://michelf.ca">Michel</a> was kind enough to notify me of this, so it&#39;s been fixed this morning.</p>
 ]]></content></entry><entry><title type="html">Name For Functionality, Not Type</title><link href="https://rlc.vlinder.ca/blog/2009/08/14/name-for-functionality-not-type"></link><published>2009-08-14T00:00:00.000Z</published><updated>2009-08-14T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/14/name-for-functionality-not-type</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/14/name-for-functionality-not-type"><![CDATA[ <p>I just read a <a href="http://web.archive.org/web/20111208114024/http://michelf.com/weblog/2009/hungarian-notation-the-original/">blog by Michel Fortin</a>, where he quotes <a href="http://www.joelonsoftware.com/articles/Wrong.html">Joel On Software</a> regarding <a href="http://en.wikipedia.org/wiki/Hungarian_notation">Hungarian notation</a>, or rather, <a href="http://www.ddj.com/cpp/184403804">Hungarian WartHogs</a>. Naming a variable for its type, or a type for its location or namespace, is a mistake.</p>
 ]]></content></entry><entry><title type="html">Hiding Complexity in C++</title><link href="https://rlc.vlinder.ca/blog/2009/08/14/hiding-complexity-in-c"></link><published>2009-08-14T00:00:00.000Z</published><updated>2009-08-14T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/14/hiding-complexity-in-c</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/14/hiding-complexity-in-c"><![CDATA[ <p>C++ is a programming language that, aside from staying as close to the machine as possible (but no closer) and as close to C as possible (but no closer), allows the programmer to express abstraction if a few very elegant constructs. That is probably the one thing I like best about C++.</p>
 ]]></content></entry><entry><title type="html">Crime, Debugging and the Broken Window Rule</title><link href="https://rlc.vlinder.ca/blog/2009/08/10/crime-debugging-and-the-broken-window-rule"></link><published>2009-08-10T00:00:00.000Z</published><updated>2009-08-10T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/10/crime-debugging-and-the-broken-window-rule</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/10/crime-debugging-and-the-broken-window-rule"><![CDATA[ <p>In the late 1980s New York City was cleaned up from under the ground up: from 1984 to 1990, the New York subway was cleaned of its grafiti, then of its non-paying passengers. After that, when the chief of tge New York transit police became the chief of the New York city police, the city was cleaned up in the same way, and crime rates dropped dramatically.</p>
 ]]></content></entry><entry><title type="html">How Data Transport Should Work IMNSHO</title><link href="https://rlc.vlinder.ca/blog/2009/08/08/how-data-transport-should-work-imnsho"></link><published>2009-08-08T00:00:00.000Z</published><updated>2009-08-08T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/08/how-data-transport-should-work-imnsho</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/08/how-data-transport-should-work-imnsho"><![CDATA[ <p>One of the most ubiquitous problems in software design is to get data from one place to another. When some-one starts coding code that does that, you seem to inevitably end up with spaghetti code that mixes the higher-level code, the content and the transport together in an awful mix that looks like a cheap weeks-old spaghetti that was left half-eaten and abandoned next to a couch somewhere. Now, I have never seen what that actually looks like, but I have a rather vivid imagination - and I&#39;ll bet you have too.</p>
 ]]></content></entry><entry><title type="html">Google releases new dialect of Basic</title><link href="https://rlc.vlinder.ca/blog/2009/08/07/google-releases-new-dialect-of-basic"></link><published>2009-08-07T00:00:00.000Z</published><updated>2009-08-07T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/07/google-releases-new-dialect-of-basic</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/07/google-releases-new-dialect-of-basic"><![CDATA[ <p>And here I though Basic was on its way out: Microsoft has been touting the advantages of C# and .NET in general far more than they have the advantages of Visual Basic (I remember when it became &quot;visual&quot;: it used to be &quot;quick&quot; and that never said anything about run time); and Google <em>seemed</em> to be much more interested in Python and Java than they were in the whole Basic scene. In the circles I&#39;ve frequented for the last several years, Basic was used only in ASP applications and then only if, for some reason, using C# was out of the question. Basic was basically legacy code that hadn&#39;t been replaced yet.</p>
 ]]></content></entry><entry><title type="html">Testing QA</title><link href="https://rlc.vlinder.ca/blog/2009/08/06/testing-qa-2"></link><published>2009-08-06T00:00:00.000Z</published><updated>2009-08-06T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/06/testing-qa-2</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/06/testing-qa-2"><![CDATA[ <p>During the development of the next version of Funky, version 1.4.00, I found a bug that hadn&#39;t been picked up during the release process for 1.3.00. Though the bug was in a corner of the interpreter that was new to version 1.3.00 and didn&#39;t cause anything too nasty - just a case where the interpreter rejects a script as invalid when it&#39;s not - it does mean an actual bug got through QA. I hate it when that happens.</p>
 ]]></content></entry><entry><title type="html">Fixing mistakes</title><link href="https://rlc.vlinder.ca/blog/2009/08/05/fixing-mistakes"></link><published>2009-08-05T00:00:00.000Z</published><updated>2009-08-05T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/08/05/fixing-mistakes</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/08/05/fixing-mistakes"><![CDATA[ <p>I just finished debugging a very, very nasty problem, which took me the better part of two hours to find and, once found, only a few minutes to fix. In this case, I have no one to blame but myself, so I really shouldn&#39;t complain too loudly, but I thought it was worth mentioning anyway, to show what can happen if you break the One Definition Rule.</p>
 ]]></content></entry><entry><title type="html">Working on a programming language</title><link href="https://rlc.vlinder.ca/blog/2009/07/31/working-on-a-programming-language"></link><published>2009-07-31T00:00:00.000Z</published><updated>2009-07-31T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/31/working-on-a-programming-language</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/31/working-on-a-programming-language"><![CDATA[ <p>Like a warm spring breeze
writing is to summer&#39;s dawn
as language to dusk</p>
 ]]></content></entry><entry><title type="html">Culture and working internationally</title><link href="https://rlc.vlinder.ca/blog/2009/07/31/culture-and-working-internationally"></link><published>2009-07-31T00:00:00.000Z</published><updated>2009-07-31T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/31/culture-and-working-internationally</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/31/culture-and-working-internationally"><![CDATA[ <p>When autumn turns hence
to where winter must come forth
spring awaits summer</p>
 ]]></content></entry><entry><title type="html">Storing data in an optical illusion</title><link href="https://rlc.vlinder.ca/blog/2009/07/29/storing-data-in-an-optical-illusion"></link><published>2009-07-29T00:00:00.000Z</published><updated>2009-07-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/29/storing-data-in-an-optical-illusion</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/29/storing-data-in-an-optical-illusion"><![CDATA[ <p>For the past five years now, I&#39;ve worked on vision inspection systems for the pharmaceutical industry. In those years, I have seen many applications in which cameras were used to read data on bottles, cartons, even tablets. Barcodes can be printed almost anywhere and can be of almost any size. One application I&#39;ve worked on - with a whole bunch of other people, of course - had <a href="http://www.optelvision.com">Optel Vision</a> systems inspect datamatrix 2D barcodes with ten digits in it (a 12x12 ECC200 datamatrix) printed on only 3x3 mm on the neckband of a vial. The system had to be able to inspect several dozens of these a minute, using VGA resolution cameras - and they were small enough that it was hard to find them if you didn&#39;t know where they were.
Let&#39;s just say this was one of the more challenging systems.</p>
 ]]></content></entry><entry><title type="html">Google Chrome OS: Promising - but promising what, exactly?</title><link href="https://rlc.vlinder.ca/blog/2009/07/29/google-chrome-os-promising-but-promising-what-exactly"></link><published>2009-07-29T00:00:00.000Z</published><updated>2009-07-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/29/google-chrome-os-promising-but-promising-what-exactly</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/29/google-chrome-os-promising-but-promising-what-exactly"><![CDATA[ <p>is this coming spring
or is&#39;t autumn in disguise?
spring doth promise much!</p>
 ]]></content></entry><entry><title type="html">Funky, functional programming and looping</title><link href="https://rlc.vlinder.ca/blog/2009/07/29/funky-functional-programming-and-looping"></link><published>2009-07-29T00:00:00.000Z</published><updated>2009-07-29T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/29/funky-functional-programming-and-looping</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/29/funky-functional-programming-and-looping"><![CDATA[ <p>functional combines
programming summers into
sheerly fun coding</p>
 ]]></content></entry><entry><title type="html">Critical sections - of what?</title><link href="https://rlc.vlinder.ca/blog/2009/07/28/critical-sections-of-what"></link><published>2009-07-28T00:00:00.000Z</published><updated>2009-07-28T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/28/critical-sections-of-what</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/28/critical-sections-of-what"><![CDATA[ <p>a glass of water
may sometimes have a storm, but
blizzards there are rare</p>
 ]]></content></entry><entry><title type="html">Ah - The One Definition Rule</title><link href="https://rlc.vlinder.ca/blog/2009/07/28/ah-the-one-definition-rule"></link><published>2009-07-28T00:00:00.000Z</published><updated>2009-07-28T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/28/ah-the-one-definition-rule</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/28/ah-the-one-definition-rule"><![CDATA[ <p>In response to Scott Meyers&#39; <a href="http://groups.google.com/group/comp.std.c++/msg/863b3f502efae0e0">question on non-inline non-template functions and the one-definition rule</a>, Francis Glassborow replied with a very interesting example of two <em>lexically</em> identical functions that weren&#39;t <em>actually</em> identical. </p>
 ]]></content></entry><entry><title type="html">A glimmer of hope on comp.std.c++</title><link href="https://rlc.vlinder.ca/blog/2009/07/28/a-glimmer-of-hope-on-comp-std-c"></link><published>2009-07-28T00:00:00.000Z</published><updated>2009-07-28T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/28/a-glimmer-of-hope-on-comp-std-c</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/28/a-glimmer-of-hope-on-comp-std-c"><![CDATA[ <p>Sun to early spring
is like snow is to autumn:
unexpected joy</p>
 ]]></content></entry><entry><title type="html">Recursive Locking Is Evil, or is it?</title><link href="https://rlc.vlinder.ca/blog/2009/07/25/recursive-locking-is-evil-or-is-it"></link><published>2009-07-25T00:00:00.000Z</published><updated>2009-07-25T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/25/recursive-locking-is-evil-or-is-it</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/25/recursive-locking-is-evil-or-is-it"><![CDATA[ <p>recursive locking:
winter&#39;&#39;s way of saying &quot;yes&quot;,
to summer&#39;&#39;s loud &quot;no&quot;</p>
 ]]></content></entry><entry><title type="html">No Concepts in C++0x</title><link href="https://rlc.vlinder.ca/blog/2009/07/24/no-concepts-in-c0x"></link><published>2009-07-24T00:00:00.000Z</published><updated>2009-07-24T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/24/no-concepts-in-c0x</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/24/no-concepts-in-c0x"><![CDATA[ <p>Sadness of winter
decided this summer, when
no concept survived</p>
 ]]></content></entry><entry><title type="html">Why you shouldn't inflate your resume</title><link href="https://rlc.vlinder.ca/blog/2009/07/23/why-you-shouldnt-inflate-your-resume"></link><published>2009-07-23T00:00:00.000Z</published><updated>2009-07-23T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/23/why-you-shouldnt-inflate-your-resume</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/23/why-you-shouldnt-inflate-your-resume"><![CDATA[ <p>Many people inflate their resumes when they apply for a job. When I&#39;m on the hiring side of the equasion, I tend to frown upon such practices: though I usually don&#39;t care much about references, I do check the outliers. But what I check more is expertise - and that&#39;s something I can&#39;t stand inflation on.</p>
 ]]></content></entry><entry><title type="html">@msofficeus @fixoutlook - what's the big deal?</title><link href="https://rlc.vlinder.ca/blog/2009/07/22/msofficeus-fixoutlook-whats-the-big-deal"></link><published>2009-07-22T00:00:00.000Z</published><updated>2009-07-22T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/22/msofficeus-fixoutlook-whats-the-big-deal</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/22/msofficeus-fixoutlook-whats-the-big-deal"><![CDATA[ <p>flabbergasted I
long for winter in summer?
perhaps just autumn</p>
 ]]></content></entry><entry><title type="html">Seven?</title><link href="https://rlc.vlinder.ca/blog/2009/07/21/seven"></link><published>2009-07-21T00:00:00.000Z</published><updated>2009-07-21T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/21/seven</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/21/seven"><![CDATA[ <p>Clarification
as clarity of summer -
yet not unlike spring.</p>
 ]]></content></entry><entry><title type="html">How to become an expert</title><link href="https://rlc.vlinder.ca/blog/2009/07/19/how-to-become-an-expert"></link><published>2009-07-19T00:00:00.000Z</published><updated>2009-07-19T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/19/how-to-become-an-expert</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/19/how-to-become-an-expert"><![CDATA[ <p>Many summers spent
on coding and on code, yet...
expertise attained?</p>
 ]]></content></entry><entry><title type="html">The IKEA Approach</title><link href="https://rlc.vlinder.ca/blog/2009/07/18/the-ikea-approach"></link><published>2009-07-18T00:00:00.000Z</published><updated>2009-07-18T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/18/the-ikea-approach</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/18/the-ikea-approach"><![CDATA[ <p>spring cleaning brings it
perhaps not any cleaner -
at least much leaner</p>
 ]]></content></entry><entry><title type="html">A new blog</title><link href="https://rlc.vlinder.ca/blog/2009/07/16/a-new-blog"></link><published>2009-07-16T00:00:00.000Z</published><updated>2009-07-16T00:00:00.000Z</updated><id>https://rlc.vlinder.ca/blog/2009/07/16/a-new-blog</id><content type="html" xml:base="https://rlc.vlinder.ca/blog/2009/07/16/a-new-blog"><![CDATA[ <p>the first of summer
the very last of winter?
the first of blog posts</p>
 ]]></content></entry></feed>